{"version":3,"sources":["helpers/toastify.jsx","helpers/definitions.js","containers/Board/Board.jsx","helpers/axios.js","containers/Rack/Rack.jsx","components/ScoreTable/ScoreTable.jsx","components/WaitingRoom/WaitingRoom.jsx","components/LandingPage/LandingPage.jsx","components/JoinGameForm/JoinGameForm.js","components/CreateGameForm/CreateGameForm.jsx","containers/User/User.jsx","containers/App.jsx","index.jsx"],"names":["Toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","piecesWeight","letterMapping","Board","props","populateModal","pieces","piecesContainer","document","createElement","setAttribute","piece","letter","pieceCont","innerHTML","addEventListener","setState","blankPiece","firstChild","innerText","toggleSelectionModal","appendChild","Object","keys","getElementById","classList","toggle","getTilePositionOnBoard","tile","boardTiles","querySelectorAll","indexOf","call","populateBoard","e","p","bp","updatePlay","data","eventType","name","playedPiece","querySelector","id","remove","elementString","elementPosition","state","swappable","toast","warn","message","pieceLetter","updateBlankPiece","setTimeout","socket","emit","roomID","componentDidMount","event","isTurn","gameEnded","cL","target","includes","isBoardDrag","currentPiece","error","getAttribute","preventDefault","className","style","border","removeAttribute","piecePosition","children","parentNode","index","length","removeChild","prevPiece","on","title","React","Component","axios","defaults","baseURL","window","serverIP","headers","post","common","b2ctk","interceptors","request","use","console","log","Promise","reject","response","makeServerRequest","opts","requestType","url","payload","then","r","catch","Rack","updatePlayWeight","tileClasses","pieceClasses","attrs","playWeights","push","getPiecesAbove","words","loopLength","isBoardEdge","ind","unshift","getPieceAttrs","getPiecesBelow","getPiecesLeft","getPiecesRight","tilePosition","textContent","slice","parseInt","position","getPlayedWords","playedPieces","wrdV","wrdH","allwords","playDirection","getPlayDirection","cachedDirection","forEach","pieceAttrs","piecesLeft","piecesAbove","piecesRight","piecesBelow","computeScore","args","finalScore","word","wordScore","mul","s","weight","a","undefined","isBingo","playTurn","getPlayedPieces","validateBoardPlay","validWords","playedWords","wordArray","attr","resp","remainingPieces","getPiecesOnRack","score","getFromBag","currentPieces","populateRack","numOfRem","skipTurn","confirm","recallPieces","isTurnSkipped","swapPieces","dirCount","topmost","i","isValidPlay","boardIsEmpty","validateNearestNeighbours","getValidPlayCount","checkIfPlayWasCentered","validCount","indexLeft","indexUp","indexDown","indexRight","tilesToCheck","pieceTilePosition","tileIndex","confirmed","makeDraw","playOrder","inPlaceShuffle","players","drawButton","amount","clearPlayedPieces","shufflePieces","arr","j","Math","floor","random","temp","value","rack","entries","alphabet","pieceContainer","toggleBag","bagItems","bagHome","updateBag","info","onClick","this","bagLength","isHost","ScoreTable","map","player","key","WaitingRoom","hostMessage","connectedPlayers","numOfPlayers","role","aria-label","playerMessage","room","LandingPage","registerHost","showJoinForm","JoinGameForm","type","onChange","saveUser","placeholder","saveID","marginRight","joinRoom","marginLeft","showHome","CreateGameForm","savePlayers","defaultValue","startGame","GameUser","concretizePlayedPieces","showJoin","display","toString","rooms","io","transports","gameStarted","isReconnection","allPlayers","firsToPlayMessage","firstToPlay","playOrderMessage","node","welcomeMessage","success","turnMessage","playerToPlay","scoreDiv","finalMessage","winner","toggleModal","emptyMessage","crypto","getRandomValues","Uint32Array","gameConfig","gameComponents","App","ReactDOM","render","StrictMode"],"mappings":"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,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,yBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,wBAIvB,yBAAKA,UAAU,UACX,yBAAKY,MAAM,mEAAmEZ,UAAU,cAAa,0BAAMA,UAAU,4BAAiC,8CACtJ,yBAAKY,MAAM,6EAA6EZ,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,8CAC7J,yBAAKY,MAAM,wDAAwDZ,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,gDACxI,yBAAKY,MAAM,6EAA4EZ,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,8CAC5J,yBAAKY,MAAM,wDAAwDZ,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,uD,GAvvB5Ia,IAAMC,W,iCCF1BC,IAAMC,SAASC,QAAf,iBAAmCC,OAAOC,SAA1C,gBACAJ,IAAMC,SAASI,QAAQC,KAAK,gBAAkB,mBAC9CN,IAAMC,SAASI,QAAQE,OAAvB,+BAA2DJ,OAAOK,OAElER,IAAMS,aAAaC,QAAQC,KAAI,SAAAD,GAG3B,OAAOA,KACR,SAAA5B,GAEC,OADA8B,QAAQC,IAAI/B,GACLgC,QAAQC,OAAOjC,MAG1BkB,IAAMS,aAAaO,SAASL,KAAI,SAAAK,GAG5B,OAAOA,KACR,SAAAlC,GAEC,OADA8B,QAAQC,IAAI/B,GACLgC,QAAQC,OAAOjC,MAG1B,IAQemC,EARW,SAACC,GAEvB,OAAOlB,IAAMkB,EAAKC,aAAaD,EAAKE,IAAKF,EAAKG,SACzCC,MAAK,SAAAC,GAAC,OAAIA,EAAEtE,QACZuE,OAAM,SAAA3E,GAAC,OAAI+D,QAAQC,IAAIhE,EAAEI,UCo1BnBwE,EA32Bf,kDACI,WAAY1G,GAAQ,IAAD,8BACf,cAAMA,IAYV2G,iBAAmB,SAACC,EAAaC,EAAcC,GAEvCD,EAAajD,SAAS,QAClBgD,EAAYhD,SAAS,MACrB,EAAKmD,YAAYC,KAAjB,sBAA0BF,GAA1B,CAAiC,QAE5BF,EAAYhD,SAAS,MAC1B,EAAKmD,YAAYC,KAAjB,sBAA0BF,GAA1B,CAAiC,QAE5BF,EAAYhD,SAAS,MAC1B,EAAKmD,YAAYC,KAAjB,sBAA0BF,GAA1B,CAAiC,QAE5BF,EAAYhD,SAAS,OAC1B,EAAKmD,YAAYC,KAAjB,sBAA0BF,GAA1B,CAAiC,UA1B1B,EAgCnBG,eAAiB,SAACxC,GACd,IAAIyC,EAAQ,GACRC,EAAa,GAGjB,GAAI,EAAKC,YAFM,MAEgB3C,GAC3B,OAAOyC,EAGX,OAAa,CACT,IAAIG,EAAM5C,EAAQ0C,EACd3F,EAAO,EAAKC,WAAW4F,GAC3B,GAAwB,OAApB7F,EAAKV,WAWL,MALA,GALAoG,EAAMI,QAAQ,EAAKC,cAAc/F,EAAKV,WAAYuG,IAClDF,GAAc,GAIV,EAAKC,YAfF,MAewBC,GAC3B,MAOZ,OAAOH,GA1DQ,EA8DnBM,eAAiB,SAAC/C,GACd,IAAIyC,EAAQ,GACRC,EAAa,GAGjB,GAAI,EAAKC,YAFM,OAEgB3C,GAC3B,OAAOyC,EAGX,OAAa,CACT,IAAIG,EAAM5C,EAAQ0C,EACd3F,EAAO,EAAKC,WAAW4F,GAC3B,GAAwB,OAApB7F,EAAKV,WAWL,MALA,GALAoG,EAAMF,KAAK,EAAKO,cAAc/F,EAAKV,WAAYuG,IAC/CF,GAAc,GAIV,EAAKC,YAfF,OAewBC,GAC3B,MAOZ,OAAOH,GAxFQ,EA4FnBO,cAAgB,SAAChD,GACb,IAAIyC,EAAQ,GACRC,EAAa,EAGjB,GAAI,EAAKC,YAFM,OAEgB3C,GAC3B,OAAOyC,EAGX,OAAa,CACT,IAAIG,EAAM5C,EAAQ0C,EACd3F,EAAO,EAAKC,WAAW4F,GAC3B,GAAwB,OAApB7F,EAAKV,WAWL,MALA,GALAoG,EAAMI,QAAQ,EAAKC,cAAc/F,EAAKV,WAAYuG,IAClDF,GAAc,EAIV,EAAKC,YAfF,OAewBC,GAC3B,MAOZ,OAAOH,GAtHQ,EA0HnBQ,eAAiB,SAACjD,GACd,IAAIyC,EAAQ,GACRC,EAAa,EAGjB,GAAI,EAAKC,YAFM,QAEgB3C,GAC3B,OAAOyC,EAGX,OAAa,CACT,IAAIG,EAAM5C,EAAQ0C,EACd3F,EAAO,EAAKC,WAAW4F,GAC3B,GAAwB,OAApB7F,EAAKV,WAWL,MALA,GALAoG,EAAMF,KAAK,EAAKO,cAAc/F,EAAKV,WAAYuG,IAC/CF,GAAc,EAIV,EAAKC,YAfF,QAewBC,GAC3B,MAOZ,OAAOH,GApJQ,EAwJnBK,cAAgB,SAAChH,EAAOoH,GAIpB,MAAO,CAHMpH,EAAMO,WAAW8G,YAAYC,MAAM,EAAG,GACvCC,SAASvH,EAAMO,WAAW8G,YAAYC,MAAM,IAEjCF,IA5JR,EAiKnBP,YAAc,SAACW,EAAUtD,GACrB,MAAiB,QAAbsD,EACOtD,GAAS,GAAKA,EAAQ,GAEX,SAAbsD,EACEtD,EAAQ,KAAOA,EAAQ,IAEZ,SAAbsD,EACGtD,EAAQ,KAAQ,EAGhBA,EAAQ,KAAQ,IA5Kb,EAkLnBuD,eAAiB,SAACC,GACd,IACIC,EAAMC,EADNC,EAAW,GACCC,EAAgB,EAAKC,iBAAiBC,gBA+FtD,OA7FAN,EAAaO,SAAQ,SAACjI,EAAOkE,GACzB,IAAIkD,EAAe,EAAKpG,uBAAuBhB,EAAMiE,YACjDoC,EAAW,YAAO,EAAKnF,WAAWkG,GAActG,WAChDwF,EAAY,YAAOtG,EAAMc,WACzBoH,EAAa,EAAKlB,cAAc,EAAK9F,WAAWkG,GAAeA,GAGnE,EAAKhB,iBAAiBC,EAAaC,EAAc4B,GAGjD,IAAIC,EAAa,EAAKjB,cAAcE,GAChCgB,EAAc,EAAK1B,eAAeU,GAClCiB,EAAc,EAAKlB,eAAeC,GAClCkB,EAAc,EAAKrB,eAAeG,GAUtC,GANAQ,EAAO,CAACM,GACRP,EAAO,CAACO,GAKM,IAAVhE,EAAa,CAGiB,IAAD,EAKC,EAUA,EAKA,EApB9B,GAA0B,IAAtBiE,EAAWhE,QACX,EAAAyD,GAAKb,QAAL,oBAAgBoB,IAIpB,GAA2B,IAAvBE,EAAYlE,QACZ,EAAAyD,GAAKnB,KAAL,oBAAa4B,IASjB,GALIT,EAAKzD,OAAS,GACd0D,EAASpB,KAAKmB,GAIS,IAAvBQ,EAAYjE,QACZ,EAAAwD,GAAKZ,QAAL,oBAAgBqB,IAIpB,GAA2B,IAAvBE,EAAYnE,QACZ,EAAAwD,GAAKlB,KAAL,oBAAa6B,IAIbX,EAAKxD,OAAS,GACd0D,EAASpB,KAAKkB,QAKlB,GAAsB,UAAlBG,EAA2B,CAGI,IAAD,EAKA,EAL9B,GAA2B,IAAvBM,EAAYjE,QACZ,EAAAwD,GAAKZ,QAAL,oBAAgBqB,IAIpB,GAA2B,IAAvBE,EAAYnE,QACZ,EAAAwD,GAAKlB,KAAL,oBAAa6B,IAIbX,EAAKxD,OAAS,GACd0D,EAASpB,KAAKkB,OAGjB,CAG6B,IAAD,EAKC,EAL9B,GAA0B,IAAtBQ,EAAWhE,QACX,EAAAyD,GAAKb,QAAL,oBAAgBoB,IAIpB,GAA2B,IAAvBE,EAAYlE,QACZ,EAAAyD,GAAKnB,KAAL,oBAAa4B,IAIbT,EAAKzD,OAAS,GACd0D,EAASpB,KAAKmB,OAKvBC,GAnRQ,EAsRnBU,aAAe,SAACC,GACZ,IAAIC,EAAa,EAoCjB,OAjCAD,EAAK7B,MAAMsB,SAAQ,SAAAS,GAEf,IAAIC,EAAY,EAAGC,EAAM,EAEzBF,EAAKT,SAAQ,SAAAY,GAET,IAAIC,EAASD,EAAE,GAEf,EAAKrC,YAAYyB,SAAQ,SAAAc,QACRC,IAATH,EAAE,IAEEA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,KAGzC,CAAC,KAAM,MAAM1F,SAAS0F,EAAE,IACxBD,GAAkBvJ,EAAcwJ,EAAE,IAE7B,CAAC,KAAM,MAAM1F,SAAS0F,EAAE,MAC7BH,EAAMrJ,EAAcwJ,EAAE,SAKtCJ,GAAwBG,KAG5BL,GADAE,GAAwBC,KAKxBJ,EAAKS,UACLR,GAAc,IAEXA,GA3TQ,EA8TnBS,SAAW,WAEP,GAAI,EAAKzJ,MAAMwD,SAAW,EAAKxD,MAAMyD,UAAW,CAE5C,EAAKsD,YAAc,GAGnB,IAAIkB,EAAe,EAAKjI,MAAM0J,kBAG9B,KAAKzB,EAAavD,OAAU,GAsExB,YADA7B,IAAMkB,MAAM,4EAnEZ,IAAK,EAAK4F,kBAAkB1B,GAExB,YADApF,IAAMkB,MAAM,kCAKhB,IAAI6F,EAAa,GACbC,EAAc,EAAK7B,eAAeC,GAGtC4B,EAAYrB,SAAQ,SAAAsB,GAChB,IAAIb,EAAO,GACXa,EAAUtB,SAAQ,SAAAuB,GACdd,GAAQc,EAAK,MAEjBH,EAAW5C,KAAKiC,MAGC/C,EAAkB,CACnCE,YAAa,OACbC,IAAK,eACLC,QAAS,CAAEY,MAAO0C,KAGPrD,MAAK,SAAAyD,GAGhB,GAAIA,EAAKjG,MACLlB,IAAMkB,MAAMiG,EAAKjG,WADrB,CASA,IAAIkG,EAAkB,EAAKC,kBAGvBC,EAAQ,EAAKrB,aAAa,CAC1B5B,MAAO2C,EACPL,QAAiC,IAAxBvB,EAAavD,SAIV,EAAK0F,WAAWnC,EAAavD,QAIxC6B,MAAK,SAACrE,GACHA,EAAKhC,OAAOsI,SAAQ,SAAAjI,GAAK,OAAI0J,EAAgBjD,KAAKzG,SAErDgG,MAAK,WACF,EAAK3F,SAAS,CAAEyJ,cAAeJ,IAC/B,EAAKK,aAAaL,GAElB,EAAKjK,MAAMmD,OAAOC,KAAK,YAAa,CAChCmH,SAAUN,EAAgBvF,OAC1BrB,OAAQ,EAAKrD,MAAMqD,OACnBjB,KAAM,EAAKpC,MAAMoC,KACjB6G,KAAMW,EAAW,GACjBO,MAAOA,aAvYhB,EAmZnBK,SAAW,WACH,EAAKxK,MAAMwD,SAAW,EAAKxD,MAAMyD,YACjB2B,OAAOqF,QAAQ,8CAE3B,EAAKC,eACL,EAAK1K,MAAMmD,OAAOC,KAAK,YAAa,CAChCuH,eAAe,EACfvI,KAAM,EAAKpC,MAAMoC,KACjBiB,OAAQ,EAAKrD,MAAMqD,YA3ZhB,EAianBuH,WAAa,aAjaM,EAqanBtC,iBAAmB,SAACL,GAUhB,IATA,IAAI4C,EAAW,EACXxC,EAAgB,OAChByC,EAAU,EAAKvJ,uBAAuB0G,EAAa,GAAGzD,YAOjDuG,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAItG,EAAQqG,EAAUC,EAGtB,GAAItG,EAAQ,IACR,MAEJ,IAAIlE,EAAQ,EAAKkB,WAAWgD,GAAO3D,WAQrB,OAAVP,GACI,YAAIA,EAAMc,WAAWuC,SAAS,QACpB,KAANmH,GACAF,GAAY,GACZxC,EAAgB,SAGhBwC,GAAY,EACZxC,EAAgB,UAQhC,QAAIwC,EAAW,KAGRxC,GAjdQ,EAodnBsB,kBAAoB,SAAC1B,GACjB,IAAI+C,GAAc,EACdC,EAA2D,IAA5C7K,SAASsB,iBAAiB,OAAOgD,OAIhDyC,EAAa,GAGjB,GAA4B,IAAxBc,EAAavD,OAAc,CAI3B,GAAIuG,EACA,OAAO,EAIPD,EAAc,EAAKE,0BAA0BjD,IAAiB,MAGjE,CACD,IAAII,EAAgB,EAAKC,iBAAiBL,GAI1C,IAAsB,IAAlBI,EACA,OAAO,EAYX,GARA,EAAKC,iBAAiBC,gBAAkBF,EAElB,UAAlBA,IACAlB,EAAa,GAKZ8D,EAaA,CAGD,GADiB,EAAKE,kBAAkBlD,EAAcd,EAAY8D,GAChDhD,EAAavD,OAAS,EACpC,OAAO,EAKXsG,EAAc,EAAKI,uBAAuBnD,OAtB3B,CAEf,GAAI,EAAKiD,0BAA0BjD,GAAgB,EAC/C,OAAO,EAIX,GADiB,EAAKkD,kBAAkBlD,EAAcd,EAAY8D,GAChDhD,EAAavD,OAAS,EACpC,OAAO,EAGXsG,GAAc,GAetB,OAAOA,GArhBQ,EAwhBnBE,0BAA4B,SAACjD,GACzB,IAAIoD,EAAa,EAgDjB,OA9CApD,EAAaO,SAAQ,SAAAjI,GACjB,IACI+K,EAAWC,EAASC,EAAWC,EAD/BC,EAAe,GAEfC,EAAoB,EAAKpK,uBAAuBhB,EAAMiE,YAM1D8G,EAAYK,EAAoB,EAChCH,EAAYG,EAAoB,GAChCF,EAAaE,EAAoB,GAHjCJ,EAAUI,EAAoB,KAaf,GACXD,EAAa1E,KAAK,EAAKvF,WAAW8J,IAElCD,GAAa,GACbI,EAAa1E,KAAK,EAAKvF,WAAW6J,IAElCE,GAAa,KACbE,EAAa1E,KAAK,EAAKvF,WAAW+J,IAElCC,GAAc,KACdC,EAAa1E,KAAK,EAAKvF,WAAWgK,IAMtCC,EAAalD,SAAQ,SAAChH,GACM,OAApBA,EAAKV,YACD,YAAIU,EAAKV,WAAWO,WAAWuC,SAAS,QACxCyH,GAAc,SAMvBA,GAzkBQ,EA4kBnBF,kBAAoB,SAAClD,EAAcd,EAAY8D,GAC3C,IACII,EAAa,EA2BjB,OAzBApD,EAAaO,SAAQ,SAACjI,EAAOkE,GACzB,GAAKA,EAAQ,IAAOwD,EAAavD,OAAQ,CAErC,IAAIkH,EAAY,EAAKrK,uBAAuBhB,EAAMiE,YAC9ChD,EAAO,EAAKC,WAAWmK,EAAYzE,GAIvC,GAAwB,OAApB3F,EAAKV,WACL,OAAO,EAGX,IAAI+F,EAAY,YAAOrF,EAAKV,WAAWO,YAE3B4J,EACRpE,EAAajD,SAAS,MACViD,EAAajD,SAAS,OAASiD,EAAajD,SAAS,SAIjEyH,GAAc,OAKnBA,GAzmBQ,EA4mBnBD,uBAAyB,SAACnD,GACtB,IAAI4D,GAAY,EAWhB,OATA5D,EAAaO,SAAQ,SAAAjI,GAEjB,IAAIiB,EAAO,EAAKC,WAAW,EAAKF,uBAAuBhB,EAAMiE,aAEzD,YAAIhD,EAAKH,WAAWuC,SAAS,QAC7BiI,GAAY,MAIbA,GAxnBQ,EA2nBnBtK,uBAAyB,SAACC,GAGtB,MAAO,GAAGG,QAAQC,KAAK,EAAKH,WAAYD,IA9nBzB,EAioBnBsK,SAAW,SAAChK,GAERA,EAAEmC,iBAIF,IAAI8H,EAAY,EAAKC,eAAe,EAAKhM,MAAMiM,SAG/C,EAAKjM,MAAMmD,OAAOC,KAAK,YAAa,CAChC2I,UAAWA,EACX1I,OAAQ,EAAKrD,MAAMqD,SAIvB,IAAI6I,EAAa9L,SAASgB,eAAe,cACtB,OAAf8K,GACAA,EAAW1J,UAlpBA,EAspBnB4H,WAAa,SAAC+B,GAOV,OALajG,EAAkB,CAC3BI,QAAS,GACTF,YAAa,MACbC,IAAI,QAAD,OAAU8F,EAAV,mBAA2B,EAAKnM,MAAMqD,WA3pB9B,EAgqBnB+I,kBAAoB,WAGhB,IAAInE,EAAe,EAAKjI,MAAM0J,kBAC1BzB,EAAavD,OAAS,GACtBuD,EAAaO,SAAQ,SAACjI,GAAD,OAAWA,EAAMiC,aArqB3B,EAyqBnB6J,cAAgB,WAEZ,IAAInM,EAAS,EAAKgK,kBAGlB,EAAKI,aAAa,EAAK0B,eAAe9L,KA9qBvB,EAirBnBwK,aAAe,WAKP,EAAK1K,MAAMwD,SAAW,EAAKxD,MAAMyD,YACjC,EAAKzD,MAAMmD,OAAOC,KAAK,cAAe,CAClChB,KAAM,EAAKpC,MAAMoC,KACjBiB,OAAQ,EAAKrD,MAAMqD,SAEvB,EAAK+I,oBACL,EAAK9B,aAAa,EAAK3H,MAAM0H,iBA5rBlB,EAgsBnB2B,eAAiB,SAACM,GAGd,IAAK,IAAIvB,EAAIuB,EAAI5H,OAAS,EAAGqG,EAAI,EAAGA,IAAK,CACrC,IAAIwB,EAAIC,KAAKC,MAAMD,KAAKE,UAAY3B,EAAI,IACpC4B,EAAOL,EAAIvB,GACfuB,EAAIvB,GAAKuB,EAAIC,GACbD,EAAIC,GAAKI,EAEb,OAAOL,GAzsBQ,EA4sBnBpC,gBAAkB,WAEd,IAAIhK,EAAS,GAWb,OAPAE,SAASsB,iBAAiB,mBAAmB8G,SAAQ,SAACjI,GAClDL,EAAO8G,KAAK,CACRxG,OAAQD,EAAMqH,YAAYC,MAAM,EAAG,GACnC+E,MAAO9E,SAASvH,EAAMqH,YAAYC,MAAM,SAIzC3H,GAztBQ,EA4tBnBoK,aAAe,SAACpK,GAEZ,IADA,IAAI2M,EAAOzM,SAASkC,cAAc,eAC3BuK,EAAK/L,YACR+L,EAAK/L,WAAW0B,SAEpB,cAAgCtB,OAAO4L,QAAQ5M,GAA/C,eAAwD,CAAC,IACjDK,EADgD,sBAA5CkE,EAA4C,KAArCsI,EAAqC,KAEhDC,EAAiB5M,SAASC,cAAc,OAC5C2M,EAAe1M,aAAa,KAA5B,mBAA8CmE,IAC9CuI,EAAe1M,aAAa,QAAS,kBACrC0M,EAAe1M,aAAa,YAAa,QACzCC,EAAK,wFAAkFwM,EAASvM,OAA3F,wDAAiJuM,EAASH,MAA1J,iBACLI,EAAetM,UAAYH,EAC3BsM,EAAK5L,YAAY+L,KAzuBN,EA6uBnBC,UAAY,WAER,GAAgD,IAA5C/L,OAAOC,KAAK,EAAKnB,MAAMkN,UAAUxI,OAArC,CAOA,IAAIyI,EAAU/M,SAASgB,eAAe,WAEtC+L,EAAQzM,UAAY,GACpByM,EAAQlM,YAAY,EAAKmM,UAAU,EAAKpN,MAAMkN,WAG9C9M,SAASgB,eAAe,YAAYC,UAAUC,OAAO,kBAZjDuB,IAAMwK,KAAK,8CAhvBA,EA+vBnBD,UAAY,SAAClN,GAET,IAAIC,EAAkBC,SAASC,cAAc,OAC7CF,EAAgBG,aAAa,QAAS,qBAHlB,oBAOCJ,GAPD,IAOpB,2BAA6B,CAAC,IACtBK,EADGC,EAAkB,QAGrBC,EAAYL,SAASC,cAAc,OACvCI,EAAUH,aAAa,QAAS,gBAEhCC,EAAK,yDAAmDC,EAAO,GAA1D,0EAC2BA,EAAO,GADlC,sBAGLC,EAAUC,UAAYH,EACtBJ,EAAgBc,YAAYR,IAjBZ,8BAmBpB,OAAON,GAlxBQ,EAqzBnBmD,kBAAoB,WAEhB,EAAK7B,WAAarB,SAASsB,iBAAiB,SAI5C,EAAK1B,MAAMmD,OAAO0B,GAAG,gBAAgB,SAAC3C,GAC9BA,EAAKE,OAAS,EAAKpC,MAAMoC,MACzB,EAAKgK,uBAKG,EAAKhC,WAAW,EAAI,EAAKzH,MAAM0H,cAAc3F,QACnD6B,MAAK,SAACrE,GACZ,EAAKtB,SAAS,CAAEyJ,cAAenI,EAAKhC,SAChC,WAAQ,EAAKoK,aAAa,EAAK3H,MAAM0H,sBAl0B7C,EAAKtD,YAAc,GACnB,EAAKtF,WAAa,KAElB,EAAKkB,MAAQ,CACT0H,cAAe,IAPJ,EADvB,qDA20BQ,OACI,yBAAKnG,UAAU,QACX,yBAAK3B,GAAG,WAAW2B,UAAU,SACzB,yBAAKoJ,QAASC,KAAKN,UAAW/I,UAAU,qBACxC,yBAAKA,UAAU,uBACX,6BAAS3B,GAAG,UAAU2B,UAAU,sBAIxC,yBAAKA,UAAU,eAEf,yBAAKA,UAAU,eACX,yBAAKY,MAAK,mBAAcyI,KAAKvN,MAAMwN,UAAzB,qBAAuDF,QAASC,KAAKN,UAAW/I,UAAU,OAChG,8BAAM,uBAAGA,UAAU,8BACnB,0BAAMA,UAAU,aAAaqJ,KAAKvN,MAAMwN,YAE5C,yBAAKtJ,UAAU,mCACX,4BAAQY,MAAM,gBAAgBwI,QAASC,KAAK7C,aAAcxG,UAAU,6BAA4B,uBAAGA,UAAU,iBAC7G,4BAAQY,MAAM,iBAAiBwI,QAASC,KAAKlB,cAAenI,UAAU,6BAA4B,uBAAGA,UAAU,mBAC/G,4BAAQY,MAAM,cAAcwI,QAASC,KAAK3C,WAAY1G,UAAU,6BAA4B,uBAAGA,UAAU,yBACzG,4BAAQY,MAAM,YAAYwI,QAASC,KAAK/C,SAAUtG,UAAU,6BAA4B,uBAAGA,UAAU,oBACrG,4BAAQY,MAAM,OAAOZ,UAAU,+BAA+BoJ,QAASC,KAAK9D,UAAU,uBAAGvF,UAAU,iBAClGqJ,KAAKvN,MAAMyN,OACR,4BAAQlL,GAAG,aAAauC,MAAM,OAAOZ,UAAU,+BAA+BoJ,QAASC,KAAKzB,UAA5F,QACE,YAn2B9B,GAA0B9G,aCuBX0I,EA1BI,SAAC1N,GAChB,IAAIiM,EAAUjM,EAAMiM,QAAQ0B,KAAI,SAACC,EAAQnJ,GACrC,OAAO,wBAAIoJ,IAAKpJ,GACZ,4BAAKzE,EAAMoC,OAASwL,EAAf,UAA2BA,EAA3B,UAA4CA,GACjD,wBAAIrL,GAAE,gBAAWqL,IAAjB,KACA,wBAAIrL,GAAE,eAAUqL,IAAhB,UAGR,OACI,yBAAK1J,UAAU,eACX,2BAAOA,UAAU,2DACb,+BACI,4BACI,sCACA,qCACA,uCAGR,+BACK+H,MCaN6B,MAhCf,SAAqB9N,GACjB,IAAI+N,EACA,6BACI,mDAAwB,2BAAI/N,EAAMgO,iBAAV,IAA6BhO,EAAMiO,eAC3D,6BACA,yBAAK/J,UAAU,iBACX,0BAAMgK,KAAK,MAAMC,aAAW,QAA5B,gBADJ,mGAIJC,EACA,6BACI,2IAGJC,EACA,yBAAKnK,UAAU,kBACX,yBAAKA,UAAU,yBACX,qEAEJ,6BACA,2CAAgB,2BAAIlE,EAAMoC,OAC1B,yCAAc,2BAAIpC,EAAMqD,SACvBrD,EAAMyN,OAASM,EAAcK,GAGtC,OACI,6BACKC,ICTEC,MAlBf,SAAqBtO,GACjB,OACI,yBAAKkE,UAAU,WACX,yBAAKA,UAAU,oBAAf,YAGA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQoJ,QAAStN,EAAMuO,aAAcrK,UAAU,gCAA/C,cAEJ,yBAAKA,UAAU,WACX,4BAAQoJ,QAAStN,EAAMwO,aAActK,UAAU,6BAA/C,iBCyBLuK,MApCf,SAAsBzO,GAClB,OACI,yBAAKkE,UAAU,YACX,8BACI,yBAAKA,UAAU,SACX,2BAAOA,UAAU,SAAjB,cAAoC,0BAAMA,UAAU,OAAhB,MACpC,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQwK,KAAK,OAAOC,SAAU3O,EAAM4O,SAAUxM,KAAK,OAAOyM,YAAY,mBAI/F,yBAAK3K,UAAU,SACX,yBAAKA,UAAU,qBACX,2BAAOA,UAAU,SAAjB,YAAkC,0BAAMA,UAAU,OAAhB,MAClC,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,WACT,0BAAMA,UAAU,oBAAhB,QAIJ,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQwK,KAAK,OAAOC,SAAU3O,EAAM8O,OAAQ1M,KAAK,SAASyM,YAAY,oBAMvG,yBAAK3K,UAAU,mDACX,4BAAQC,MAAO,CAAE4K,YAAa,OAAS7K,UAAU,2CAA2CoJ,QAAStN,EAAMgP,UAA3G,QACA,4BAAQ7K,MAAO,CAAE8K,WAAY,OAAS/K,UAAU,4CAA4CoJ,QAAStN,EAAMkP,UAA3G,cCCLC,MA9Bf,SAAwBnP,GACpB,OACI,yBAAKkE,UAAU,cACX,8BACI,yBAAKA,UAAU,SACX,2BAAOA,UAAU,SAAjB,cAAoC,0BAAMA,UAAU,OAAhB,KAApC,KACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQwK,KAAK,OAAOC,SAAU3O,EAAM4O,SAAUxM,KAAK,OAAOyM,YAAY,mBAG/F,yBAAK3K,UAAU,WACX,yBAAKA,UAAU,uBACX,4BAAQyK,SAAU3O,EAAMoP,aACpB,4BAAQxC,MAAM,GAAGyC,cAAY,GAA7B,gCACA,4BAAQzC,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,QAIZ,6BACA,yBAAK1I,UAAU,mDACX,4BAAQC,MAAO,CAAE4K,YAAa,OAAS7K,UAAU,2CAA2CoJ,QAAStN,EAAMsP,WAA3G,SACA,4BAAQnL,MAAO,CAAE8K,WAAY,OAAS/K,UAAU,4CAA4CoJ,QAAStN,EAAMkP,UAA3G,cCZCK,E,kDACjB,WAAYvP,GAAQ,IAAD,8BACf,cAAMA,IAuBV0J,gBAAkB,WACd,OAAOtJ,SAASsB,iBAAiB,QAzBlB,EA4BnB8N,uBAAyB,WAGrB,IAAIvH,EAAe,EAAKyB,kBACpBzB,EAAavD,OAAS,GACtBuD,EAAaO,SAAQ,SAACjI,GAElBA,EAAM8D,gBAAgB,SACtB9D,EAAM8D,gBAAgB,MAEtB9D,EAAMD,aAAa,QAAS,MAC5BC,EAAMD,aAAa,aAAa,GAChCC,EAAMiE,WAAWlE,aAAa,aAAa,OAxCpC,EA6CnBmP,SAAW,WACPrP,SAASkC,cAAc,YAAY6B,MAAMuL,QAAU,OACnDtP,SAASkC,cAAc,aAAa6B,MAAMuL,QAAU,SA/CrC,EAkDnBnB,aAAe,WACN,EAAK5L,MAAM8K,QACZ,EAAK7M,SAAS,CAAE6M,QAAQ,EAAMpK,OAAQ,EAAKA,SAG/CjD,SAASkC,cAAc,YAAY6B,MAAMuL,QAAU,OACnDtP,SAASkC,cAAc,eAAe6B,MAAMuL,QAAU,SAxDvC,EA2DnBZ,OAAS,SAACvL,GACN,EAAK3C,SAAS,CAAEyC,OAAQ,aAAME,EAAMI,OAAOiJ,OAAQ+C,cA5DpC,EA+DnBf,SAAW,SAACrL,GACR,EAAK3C,SAAS,CAAEwB,KAAMmB,EAAMI,OAAOiJ,SAhEpB,EAmEnBwC,YAAc,SAAC7L,GACX,EAAK0K,aAAenG,SAASvE,EAAMI,OAAOiJ,QApE3B,EAuEnB0C,UAAY,SAACxN,GACTA,EAAEmC,iBAGE,EAAKtB,MAAMP,KAAKsC,OAAS,EACzB7B,IAAMkB,MAAM,6CAIX,CAAC,EAAG,EAAG,GAAGH,SAAS,EAAKqK,eAI7B7N,SAASkC,cAAc,eAAe6B,MAAMuL,QAAU,OACtDtP,SAASkC,cAAc,mBAAmB6B,MAAMuL,QAAU,QAC1D,EAAKvM,OAAOC,KAAK,OAAQ,CAAEhB,KAAM,EAAKO,MAAMP,KAAMiB,OAAQ,EAAKA,UAL3DR,IAAMkB,MAAM,4CAjFD,EAyFnBiL,SAAW,SAAClN,IACRA,EAAEmC,iBAGE,EAAKtB,MAAMP,KAAKsC,OAAS,GACzB7B,IAAMkB,MAAM,6CAIiB,IAA7B,EAAKpB,MAAMU,OAAOqB,OAORwB,EAAkB,CAAEE,YAAa,MAAOC,IAAK,SAAUC,QAAS,KACtEC,MAAK,SAAArE,GAEJA,EAAK0N,MAAMhM,SAAS,EAAKjB,MAAMU,SAMpC,EAAKF,OAAOC,KAAK,OAAQ,CAAEhB,KAAM,EAAKO,MAAMP,KAAMiB,OAAQ,EAAKV,MAAMU,SAErEjD,SAASkC,cAAc,aAAa6B,MAAMuL,QAAU,OACpDtP,SAASkC,cAAc,mBAAmB6B,MAAMuL,QAAU,SARtD7M,IAAMkB,MAAN,kEAA6D,EAAKpB,MAAMU,OAAxE,SAVJR,IAAMkB,MAAM,sCAnGD,EAyHnBmL,SAAW,SAACpN,GACRA,EAAEmC,iBACF,EAAKrD,SAAS,CAAE6M,QAAQ,EAAOrL,KAAM,KACrC,EAAK6L,aAAe,EAEpB7N,SAASkC,cAAc,YAAY6B,MAAMuL,QAAU,QACnDtP,SAASkC,cAAc,aAAa6B,MAAMuL,QAAU,OACpDtP,SAASkC,cAAc,eAAe6B,MAAMuL,QAAU,QAhIvC,EAmInBpM,kBAAoB,WAEhBlD,SAASkC,cAAc,mBAAmB6B,MAAMuL,QAAU,OAC1DtP,SAASkC,cAAc,aAAa6B,MAAMuL,QAAU,OACpDtP,SAASkC,cAAc,eAAe6B,MAAMuL,QAAU,OACtDtP,SAASkC,cAAc,UAAU6B,MAAMuL,QAAU,OAOjD,EAAKvM,OAAO0B,GAAG,qBAAqB,WAChC,EAAK1B,OAAO0M,GAAG1J,KAAK2J,WAAa,CAAC,UAAW,aAC7C1P,SAASgB,eAAe,cAAcd,aAAa,QAAS,mBAC5DF,SAASgB,eAAe,cAAcd,aAAa,QAAS,uBAIhE,EAAK6C,OAAO0B,GAAG,WAAW,WACtBzE,SAASgB,eAAe,cAAcd,aAAa,QAAS,2BAC5DF,SAASgB,eAAe,cAAcd,aAAa,QAAS,oBACxD,EAAKqC,MAAMoN,aACX,EAAK5M,OAAOC,KAAK,OAAQ,CAAEC,OAAQ,EAAKA,OAAQ2M,gBAAgB,OAKxE,EAAK7M,OAAO0B,GAAG,cAAc,WACrB,EAAKlC,MAAMoN,aACXlN,IAAMkB,MAAM,8DAEhB3D,SAASgB,eAAe,cAAcd,aAAa,QAAS,mBAC5DF,SAASgB,eAAe,cAAcd,aAAa,QAAS,sBAIhE,EAAK6C,OAAO0B,GAAG,cAAc,SAAC3C,GAErB,EAAKS,MAAMoN,aAIZ,EAAKnP,SAAS,CACVqL,QAAQ,GAAD,mBAAM,EAAKtJ,MAAMsJ,SAAjB,CAA0B/J,EAAKE,OACtC4L,iBAAkB,EAAKrL,MAAMqL,iBAAmB,IACjD,WAKK,EAAKrL,MAAM8K,QAAW,EAAK9K,MAAMqL,mBAAqB,EAAKC,cAC3D,EAAK9K,OAAOC,KAAK,iBAAkB,CAC/B6M,WAAY,EAAKtN,MAAMsJ,QACvB5I,OAAQ,EAAKV,MAAMU,OACnB0M,aAAa,UAQjC,EAAK5M,OAAO0B,GAAG,YAAY,SAAC3C,GACxB,IACIgO,EADAC,EAAcjO,EAAK6J,UAAU,GACVqE,EAAmB,GAI1C,EAAKxP,SAAS,CACVqL,QAAS/J,EAAK6J,UACdyB,UAAWtL,EAAKsL,UAChBN,SAAUhL,EAAKgL,WAGfiD,IAAgB,EAAKxN,MAAMP,MAC3B,EAAKxB,SAAS,CAAE4C,QAAQ,IACxB0M,EAAiB,yBAGjBA,EAAiB,UAAMC,EAAN,uBAIrB/P,SAASgB,eAAT,eAAgC+O,IAAepP,UAAY,MAG3DmB,EAAK6J,UAAUvD,SAAQ,SAACoF,EAAQnJ,GACxBmJ,IAAW,EAAKjL,MAAMP,OACtBwL,EAAM,UAAMA,EAAN,WAELnJ,EAAQ,IAAOvC,EAAK6J,UAAUrH,OAC/B0L,GAAoBxC,EAGpBwC,GAAgB,UAAOxC,EAAP,cAIxB/K,IAAMC,KAAN,UAAcoN,EAAd,+CAAsEE,EAAtE,SAKJ,EAAKjN,OAAO0B,GAAG,aAAa,SAAC3C,GAGzB,EAAKtB,SAAS,CACVmP,aAAa,EACb9D,QAAU,EAAKtJ,MAAM8K,OAAZ,YAAgD,EAAK9K,MAAMsJ,SAA3D,YAAyB/J,EAAK+N,YACvCjC,iBAAmB,EAAKrL,MAAM8K,OAAkC,EAAK9K,MAAMqL,iBAApC9L,EAAK+N,WAAWvL,SAI3DtE,SAASkC,cAAc,UAAU+B,gBAAgB,SACjDjE,SAASsB,iBAAiB,mBAAmB8G,SAAQ,SAAC6H,GAClDA,EAAK7N,YAGT,IAAI8N,EAAiB,EAAK3N,MAAM8K,OAC5B,2FAEA,wCACJ5K,IAAM0N,QAAN,0BAA4B,EAAK5N,MAAMP,KAAvC,aAAgDkO,EAAhD,2EAIJ,EAAKnN,OAAO0B,GAAG,aAAa,SAAC3C,GACzB,IAAIsO,EAAazN,EAkCjB,GA/BA,EAAKyM,yBAGDtN,EAAKuO,eAAiB,EAAK9N,MAAMP,KACjC,EAAKxB,SAAS,CACV4C,QAAQ,EACR0J,SAAUhL,EAAKgL,SACfM,UAAWtL,EAAKsL,YACjB,kBAAMgD,EAAW,uBAGpB,EAAK5P,SAAS,CACV4C,QAAQ,EACR0J,SAAUhL,EAAKgL,SACfM,UAAWtL,EAAKsL,YACjB,kBAAMgD,EAAW,UAAMtO,EAAKuO,aAAX,sBAIxB,EAAK9N,MAAMsJ,QAAQzD,SAAQ,SAAAoF,GACnBA,IAAW1L,EAAKuO,aAChBrQ,SAASgB,eAAT,eAAgCwM,IAAU7M,UAAY,MAGtDX,SAASgB,eAAT,eAAgCwM,IAAU7M,UAAY,QAO1DmB,EAAKyI,cACL5H,EAAUb,EAAKE,OAAS,EAAKO,MAAMP,KAC/B,wBACAW,EAAO,0BAAsBb,EAAKE,UAErC,CAEDW,EAAUb,EAAKE,OAAS,EAAKO,MAAMP,KAAzB,sBACSF,EAAK+G,KADd,mBAC6B/G,EAAKiI,MADlC,qBAEHjI,EAAKE,KAFF,oBAEkBF,EAAK+G,KAFvB,mBAEsC/G,EAAKiI,MAF3C,WAKV,IAAIuG,EAAWtQ,SAASgB,eAAT,gBAAiCc,EAAKE,OACrDsO,EAAS3P,UAAY+G,SAAS4I,EAAS3P,WAAamB,EAAKiI,MAM7D,GAAsB,IAAlBjI,EAAKqI,UAAqC,IAAnBrI,EAAKsL,UAAiB,CAC7C,IAAImD,EAAe,GACfC,EAAS,CAAExO,KAAM,GAAI+H,MAAO,GAGhCtH,IAAMwK,KAAN,UAActK,EAAd,MACA,EAAKnC,SAAS,CAAE6C,WAAW,IAG3B,EAAKd,MAAMsJ,QAAQzD,SAAQ,SAAAoF,GACvB,IAAIzD,EAAQrC,SAAS1H,SAASgB,eAAT,gBAAiCwM,IAAU7M,WAC5DoJ,EAAQyG,EAAOzG,QACfyG,EAAOxO,KAAOwL,EACdgD,EAAOzG,MAAQA,MAKnBwG,EADA,EAAKhO,MAAMP,OAASwO,EAAOxO,KACf,2BAAuBwO,EAAOxO,KAA9B,qCAA+DwO,EAAOzG,MAAtE,YAGA,UAAMyG,EAAOxO,KAAb,+BAAwCwO,EAAOzG,MAA/C,+BAA2E,EAAKxH,MAAMP,KAAtF,KAGhB,EAAKyO,cACLzQ,SAASgB,eAAe,UAAUL,UAAY4P,MAE7C,CACD,IAAIG,EAAe,GAEnBjO,IAAMwK,KAAN,UAActK,EAAd,kBAA+ByN,EAA/B,MAGIM,EADmB,IAAnB5O,EAAKsL,UACU,gCAES,IAAnBtL,EAAKsL,UACK,oCAGH,eAAWtL,EAAKsL,UAAhB,gCAGZtL,EAAKsL,WAAa,GAClB,EAAKrK,OAAOC,KAAK,cACb,CACIC,OAAQ,EAAKV,MAAMU,OACnBlB,UAAW,eACXY,QAAQ,aAAD,OAAe+N,UAvW3B,EA8WnBD,YAAc,WACVzQ,SAASgB,eAAe,YAAYC,UAAUC,OAAO,cA5WrD,EAAK2M,aAAe,EACpB,EAAK9K,OAAS0M,IAAG,UAAD,OAAWzK,OAAOC,SAAlB,SAAmC,CAAEyK,WAAY,CAAC,eAIlE,EAAKzM,OAAL,aAAoB+B,OAAO2L,OAAOC,gBAAgB,IAAIC,YAAY,IAAI,GAAGtB,WAAW9H,MAAM,EAAG,IAE7F,EAAKlF,MAAQ,CACTP,KAAM,GACNiB,OAAQ,GACR4I,QAAS,GACTiB,SAAU,GACV1J,QAAQ,EACRiK,QAAQ,EACRD,UAAW,IACX/J,WAAW,EACXsM,aAAa,EACb/B,iBAAkB,GApBP,E,qDA2Xf,IAAIkD,EACA,yBAAKhN,UAAU,kBACX,kBAAC,EAAD,CAAaqK,aAAchB,KAAKgB,aAAcC,aAAcjB,KAAKkC,WACjE,kBAAC,EAAD,CAAgBL,YAAa7B,KAAK6B,YAC9BR,SAAUrB,KAAKqB,SACfM,SAAU3B,KAAK2B,SACfI,UAAW/B,KAAK+B,YACpB,kBAAC,EAAD,CAAcR,OAAQvB,KAAKuB,OACvBF,SAAUrB,KAAKqB,SACfI,SAAUzB,KAAKyB,SACfE,SAAU3B,KAAK2B,WACnB,kBAAC,EAAD,CAAa9M,KAAMmL,KAAK5K,MAAMP,KAC1BiB,OAAQkK,KAAK5K,MAAMU,OACnBoK,OAAQF,KAAK5K,MAAM8K,OACnBQ,aAAcV,KAAKU,aACnBD,iBAAkBT,KAAK5K,MAAMqL,oBAErCmD,EACA,yBAAKjN,UAAU,8BACX,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CACIb,OAAQkK,KAAK5K,MAAMU,OACnBF,OAAQoK,KAAKpK,OACbf,KAAMmL,KAAK5K,MAAMP,KACjBoB,OAAQ+J,KAAK5K,MAAMa,OACnBC,UAAW8J,KAAK5K,MAAMc,aAE9B,yBAAKS,UAAU,WAEf,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,cACX,0BAAM3B,GAAG,cAAc,uBAAG2B,UAAU,iBADxC,QAGA,kBAAC,EAAD,CACIf,OAAQoK,KAAKpK,OACbf,KAAMmL,KAAK5K,MAAMP,KACjB6J,QAASsB,KAAK5K,MAAMsJ,UAEvBsB,KAAK5K,MAAMoN,YACR,kBAAC,EAAD,CAAM5M,OAAQoK,KAAKpK,OACff,KAAMmL,KAAK5K,MAAMP,KACjBiB,OAAQkK,KAAK5K,MAAMU,OACnBoK,OAAQF,KAAK5K,MAAM8K,OACnBjK,OAAQ+J,KAAK5K,MAAMa,OACnByI,QAASsB,KAAK5K,MAAMsJ,QACpBxI,UAAW8J,KAAK5K,MAAMc,UACtByJ,SAAUK,KAAK5K,MAAMuK,SACrBM,UAAWD,KAAK5K,MAAM6K,UACtBuC,YAAaxC,KAAK5K,MAAMoN,YACxBrG,gBAAiB6D,KAAK7D,kBAC1B,QAIpB,OACI,yBAAKxF,UAAU,aACX,yBAAK3B,GAAG,WAAW2B,UAAU,SACzB,yBAAKoJ,QAASC,KAAKsD,YAAa3M,UAAU,qBAC1C,yBAAKA,UAAU,uBACX,6BAASA,UAAU,mBACf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBAAoB,0BAAMgK,KAAK,MAAMC,aAAW,UAA5B,iBACnC,yBAAK5L,GAAG,SAAS2B,UAAU,sBAK1CiN,EACAD,O,GAncqBlM,aCGvBoM,G,8KATX,OACE,yBAAKlN,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUa,IAAMC,YCGxBqM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnR,SAASgB,eAAe,U","file":"static/js/main.ef849deb.chunk.js","sourcesContent":["import 'react-toastify/dist/ReactToastify.css';\nimport {ToastContainer} from 'react-toastify';\nimport React from 'react';\n\nconst Toastify = () => {\n    return (<ToastContainer\n        autoClose={8000} // 8 seconds\n        hideProgressBar\n        newestOnTop={true}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnVisibilityChange\n        draggable\n        pauseOnHover={true}/>)\n}\nexport default Toastify;","// Constants used throughout the app\n\n// const specialTiles = ['dW', 'dL', 'tL', 'tW'];\nconst piecesWeight = {\n    'A': 1,\n    'B': 3,\n    'C': 3,\n    'D': 2,\n    'E': 1,\n    'F': 4,\n    'G': 2,\n    'H': 4,\n    'I': 1,\n    'J': 8,\n    'K': 5,\n    'L': 1,\n    'M': 3,\n    'N': 1,\n    'O': 1,\n    'P': 3,\n    'Q': 10,\n    'R': 1,\n    'S': 1,\n    'T': 1,\n    'U': 1,\n    'V': 4,\n    'W': 4,\n    'X': 8,\n    'Y': 4,\n    'Z': 10\n};\nconst  letterMapping = {\n    'dL': 2,\n    'tL': 3,\n    'dW': 2,\n    'tW': 3\n};\n\nexport {letterMapping};\nexport {piecesWeight};","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { piecesWeight } from '../../helpers/definitions';\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            blankPiece: '',\n            swappable: true,\n            currentPiece: null,\n            isBoardDrag: false,\n        }\n    }\n\n    populateModal = (pieces) => {\n        // Create container element\n        let piecesContainer = document.createElement('div');\n        piecesContainer.setAttribute('class', 'bagPieceContainer');\n\n        // Create the pieces and eventually append to the parent\n        // container. State/props has them as an array\n        for (const letter of Object.keys(pieces)) {\n            let piece;\n\n            let pieceCont = document.createElement('div');\n            pieceCont.setAttribute('class', 'bagPieceItem');\n\n            piece = `<div class='piece'><span class=\"letter\">${letter}</span></div>`;\n            pieceCont.innerHTML = piece;\n\n            // Add click event listener to all, signifying choice of transformation\n            // of blank piece\n            pieceCont.addEventListener('click', () => {\n                this.setState({ blankPiece: pieceCont.firstChild.firstChild.innerText });\n                this.toggleSelectionModal();\n            });\n\n            piecesContainer.appendChild(pieceCont);\n        }\n        document.getElementById('selectionHome').appendChild(piecesContainer);\n    }\n\n    toggleSelectionModal = () => {\n        // Actually show (toggle) modal\n        document.getElementById('selectionModal').classList.toggle('is-active');\n    }\n\n    getTilePositionOnBoard = (tile) => {\n        // All the tiles on the board\n        const boardTiles = document.querySelectorAll('.tile');\n\n        // For each tile on the board, get the one that matches\n        // the passed tile\n        return [].indexOf.call(boardTiles, tile);\n    }\n\n    populateBoard = (e, p) => {\n        let bp = document.createElement('div');\n        bp.setAttribute('id', `jp_${p}`);\n        bp.setAttribute('class', 'bp');\n        bp.innerHTML = e;\n        document.querySelectorAll('.tile')[p].appendChild(bp);\n    }\n\n    // Callback to handle sio events\n    updatePlay = (data) => {\n        // For events that happen when a piece is moved from one\n        // position on the board to another. Exclude thyself\n        if (data.eventType === 'drag') {\n            if (data.name !== this.props.name) {\n                let playedPiece = document.querySelector(`#${data.id}`);\n                if (playedPiece !== null) {\n                    playedPiece.remove();\n                }\n            }\n        }\n        else if (data.eventType === 'rackToBoard') {\n            if (data.name !== this.props.name) {\n                this.populateBoard(data.elementString, data.elementPosition);\n            }\n        }\n        else if (data.eventType === 'bagNearEmpty') {\n            // Announce only once\n            if (this.state.swappable) {\n                this.setState({ swappable: false });\n                toast.warn(data.message);\n            }\n        }\n        // Implicit updateBlank. Expand as needed\n        else {\n            document.getElementById(data.id).firstChild.firstChild.innerText = data.pieceLetter;\n        }\n    }\n\n    updateBlankPiece = (id) => {\n        // Loop until the player has chosen a letter to \n        // replace the blank piece with\n        if (this.state.blankPiece === '') {\n            setTimeout(() => {\n                this.updateBlankPiece(id);\n            }, 200);\n        }\n        else {\n            // Emit to everybody and then reset\n            let pieceLetter = this.state.blankPiece;\n            this.props.socket.emit('inPlayEvent', {\n                roomID: this.props.roomID,\n                pieceLetter: pieceLetter,\n                eventType: 'updateBlank',\n                id: id,\n            });\n            this.setState({ blankPiece: '' });\n        }\n    }\n\n    componentDidMount = () => {\n        // Populate the selectionModal\n        this.populateModal(piecesWeight);\n\n        /* Events fired on the drag target */\n\n        // When a piece is initially moved, from rack or board\n        document.addEventListener(\"dragstart\", (event) => {\n            if (this.props.isTurn && !this.props.gameEnded) {\n                try {\n                    let cL = [...event.target.classList]\n                    if (cL.includes('pieceContainer') || cL.includes('bp')) {\n                        // A piece having a classname with 'bp' is originated\n                        // from the board itself, signifying a drag\n                        if (cL.includes('bp')) {\n                            this.setState({ isBoardDrag: true });\n                        }\n                        this.setState({ currentPiece: event.target });\n                    }\n                } catch (error) {\n                    toast.error(`Invalid drag motion.`);\n                }\n            }\n            else {\n                if (this.props.gameEnded) {\n                    toast.error(\"The game has ended. No moves are valid.\");\n                    return;\n                }\n                // If it's a drag that's associated with a scrabble piece. Warn to wait\n                if (event.target.getAttribute('draggable')) {\n                    toast.error(`It's not your turn, ${this.props.name}. Kindly wait your turn.`);\n                }\n\n            }\n        });\n\n        /* Events fired on the drop target */\n\n        // When the draggable element enters the droptarget, change the border style\n        document.addEventListener(\"dragenter\", (event) => {\n            event.preventDefault();\n            if (this.props.isTurn && !this.props.gameEnded) {\n                if (event.target.className.includes('droppable')) {\n                    event.target.style.border = \"0.4px solid yellow\";\n                }\n            }\n        });\n\n        // By default, data/elements cannot be dropped in other elements. \n        // To allow a drop, we must prevent the default handling of the element\n        document.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        // When the draggable element leaves the droptarget, reset the style\n        document.addEventListener(\"dragleave\", (event) => {\n            if (this.props.isTurn && !this.props.gameEnded) {\n                event.target.removeAttribute('style');\n            }\n        });\n\n        document.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            if (this.props.isTurn && !this.props.gameEnded) {\n                event.target.removeAttribute('style'); //  Reset the border\n                let piece = this.state.currentPiece;\n                if (event.target.className.includes('droppable') && piece !== null) {\n                    let cL = [...piece.classList]\n                    // Register only for valid movements. Avoid stuff like\n                    // a mistakenly-made drag or a bare tile drag\n                    if (cL.includes('pieceContainer') || cL.includes('bp')) {\n                        // Get the position of the tile the piece was dropped in\n                        let piecePosition = this.getTilePositionOnBoard(event.target);\n\n                        // Make a new parent element with a custom class and duplicate the\n                        // contents of the current piece to it, and then add it as a child \n                        // to the tile where it is placed\n                        let bp = document.createElement('div');\n                        bp.setAttribute('draggable', 'true');\n                        bp.setAttribute('id', `jp_${piecePosition}`);\n                        bp.setAttribute('class', 'bp');\n\n                        // Piece is a blank? \n                        if (piece.firstChild.firstChild.innerText === \"\") {\n                            // Show modal for selection\n                            this.toggleSelectionModal();\n                            this.updateBlankPiece(`jp_${piecePosition}`);\n                        }\n\n                        // Make piece appear on board\n                        bp.innerHTML = piece.innerHTML;\n                        event.target.appendChild(bp);\n\n                        // If it's a board drag i.e the user is shifting the position of the\n                        // piece whilst still playing on the board\n                        if (this.state.isBoardDrag) {\n                            let children = piece.parentNode.children; // Get all the children of the source tile\n                            // Special tiles (dL, tW, etc) will have more than one children (one for the actual message and\n                            // the other for the piece that was previously on it). Normal tiles will have just one child.\n                            // We want to remove the just the piece from the tile. So, get an index based on the length of the children.\n                            let index = children.length === 1 ? 0 : 1;\n                            // Remove appropriately\n                            piece.parentNode.removeChild(children[index]);\n\n                            // Reset \n                            this.setState({ isBoardDrag: false });\n\n                            // Reflect on other players' boards \n                            // that a board-drag happened\n                            this.props.socket.emit('inPlayEvent', {\n                                roomID: this.props.roomID,\n                                name: this.props.name,\n                                eventType: 'drag',\n                                id: piece.id,\n                            });\n                        }\n                        // Implicit movement of tile from rack to board\n                        else {\n                            // The rack pieces can be deleted, as they have been duplicated on the board\n                            let prevPiece = document.getElementById(piece.id);\n                            if (prevPiece) { prevPiece.remove() };\n                        }\n                        // Reflect on other players' boards that a rack-event\n                        // happened\n                        this.props.socket.emit('inPlayEvent', {\n                            name: this.props.name,\n                            eventType: 'rackToBoard',\n                            roomID: this.props.roomID,\n                            elementString: bp.innerHTML,\n                            elementPosition: piecePosition\n                        });\n                        // Reset\n                        this.setState({ currentPiece: null });\n                    }\n                }\n            }\n        });\n\n        /* Register Socket.io Event Listener */\n\n        // Replicate the play event, regardless of the type\n        this.props.socket.on('inPlay', (data) => {\n            this.updatePlay(data);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div id=\"selectionModal\" className=\"modal\">\n                    <div className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section id=\"selectionHome\" className=\"modal-card-body\">\n                            <div className=\"centralize title is-4\"><p>Choose Letter...</p></div>\n                        </section>\n                    </div>\n                </div>\n                <div className='boardContainer'>\n                    <div className=\"board\">\n                        <div className='row'>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW cT\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"legend\">\n                        <div title=\"A piece must be played on this tile at the beginning of the game\" className='legendItem'><span className=\"legendColor legendStart\"></span><span>Start Point</span></div>\n                        <div title=\"The total score of the word played is doubled when a piece is on this tile\" className='legendItem'><span className=\"legendColor legendDW\"></span><span>Double Word</span></div>\n                        <div title=\"The total score of the letter on this tile is doubled\" className='legendItem'><span className=\"legendColor legendDL\"></span><span>Double Letter</span></div>\n                        <div title=\"The total score of the word played is tripled when a piece is on this tile\"className='legendItem'><span className=\"legendColor legendTW\"></span><span>Triple Word</span></div>\n                        <div title=\"The total score of the letter on this tile is tripled\" className='legendItem'><span className=\"legendColor legendTL\"></span><span>Triple Letter</span></div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Board;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `http://${window.serverIP}:5005/api/v1`;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${window.b2ctk}`;\n\naxios.interceptors.request.use(request => {\n    // console.log(request);\n    // Edit request config\n    return request;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    // console.log(response);\n    // Edit response config\n    return response;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\nconst makeServerRequest = (opts) => {\n    // Payload is params for GET and same for POST\n    return axios[opts.requestType](opts.url, opts.payload)\n        .then(r => r.data)\n        .catch(e => console.log(e.data));\n}\n\n// export { __makeServerRequest};\nexport default makeServerRequest;","import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport makeServerRequest from '../../helpers/axios';\nimport { letterMapping } from '../../helpers/definitions';\n\nexport class Rack extends Component {\n    constructor(props) {\n        super(props);\n\n        this.playWeights = [];\n        this.boardTiles = null;\n\n        this.state = {\n            currentPieces: []\n        }\n    }\n\n    // Saves the current play's weight. Essentially means to record whether\n    // the play had stuff like dL, tW, etc.\n    updatePlayWeight = (tileClasses, pieceClasses, attrs) => {\n        // If a just-played piece...\n        if (pieceClasses.includes('bp')) {\n            if (tileClasses.includes('dL')) {\n                this.playWeights.push([...attrs, 'dL']);\n            }\n            else if (tileClasses.includes('tL')) {\n                this.playWeights.push([...attrs, 'tL']);\n            }\n            else if (tileClasses.includes('dW')) {\n                this.playWeights.push([...attrs, 'dW']);\n            }\n            else if (tileClasses.includes('tW')) {\n                this.playWeights.push([...attrs, 'tW']);\n            }\n        }\n    }\n\n    // Returns the word(s) above the piece at index\n    getPiecesAbove = (index) => {\n        let words = [];\n        let loopLength = 15;\n        let position = 'top';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index - loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.unshift(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 15;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return words;\n    }\n\n    // Returns the word(s) below the piece at index\n    getPiecesBelow = (index) => {\n        let words = [];\n        let loopLength = 15;\n        let position = 'down';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index + loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.push(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 15;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return words\n    }\n\n    // Returns the word(s) on the left of the piece at index\n    getPiecesLeft = (index) => {\n        let words = [];\n        let loopLength = 1;\n        let position = 'left';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index - loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.unshift(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 1;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break\n            }\n        }\n        return words;\n    }\n\n    // Returns the word(s) on the right of the piece at index\n    getPiecesRight = (index) => {\n        let words = [];\n        let loopLength = 1;\n        let position = 'right';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index + loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.push(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 1;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break\n            }\n        }\n        return words\n    }\n\n    // Returns the attributes (letter, value, tilePosition), given a piece \n    getPieceAttrs = (piece, tilePosition) => {\n        let letter = piece.firstChild.textContent.slice(0, 1);\n        let value = parseInt(piece.firstChild.textContent.slice(1));\n\n        return [letter, value, tilePosition];\n    }\n\n    // Returns if a passed in tile and position is at\n    // the edge of the board in said position\n    isBoardEdge = (position, index) => {\n        if (position === 'top') {\n            return index >= 0 && index < 15;\n        }\n        else if (position === 'down') {\n            return index > 209 && index < 225;\n        }\n        else if (position === 'left') {\n            return (index % 15) === 0;\n        }\n        else { // Implicit right\n            return (index % 15) === 14;\n        }\n    }\n\n    /* Should return the valid words played. These will eventually be weighted\n    amounting to the final play score */\n    getPlayedWords = (playedPieces) => {\n        let allwords = []; // Storage for all the played words\n        let wrdV, wrdH, playDirection = this.getPlayDirection.cachedDirection;\n\n        playedPieces.forEach((piece, index) => {\n            let tilePosition = this.getTilePositionOnBoard(piece.parentNode);\n            let tileClasses = [...this.boardTiles[tilePosition].classList];\n            let pieceClasses = [...piece.classList];\n            let pieceAttrs = this.getPieceAttrs(this.boardTiles[tilePosition], tilePosition);\n\n            // Update play weights used for eventual scoring\n            this.updatePlayWeight(tileClasses, pieceClasses, pieceAttrs);\n\n            // Get the pieces surrounding the tile\n            let piecesLeft = this.getPiecesLeft(tilePosition);\n            let piecesAbove = this.getPiecesAbove(tilePosition);\n            let piecesRight = this.getPiecesRight(tilePosition);\n            let piecesBelow = this.getPiecesBelow(tilePosition);\n\n            // The current piece is saved. It's expected that the piece(s) to \n            // the left and its right will be added\n            wrdH = [pieceAttrs];\n            wrdV = [pieceAttrs];\n\n            // The first piece that's played, in the playing direction, would have all the pieces\n            // played in that direction. So, for the very first piece, get the pieces played in all\n            // directions\n            if (index === 0) {\n                // If there's a piece/are pieces on its left, add it/them to the beginning\n                // of the word array\n                if (piecesLeft.length !== 0) {\n                    wrdH.unshift(...piecesLeft)\n                }\n                // If there's a piece/are pieces on its right, add it/them to the end\n                // of the word array\n                if (piecesRight.length !== 0) {\n                    wrdH.push(...piecesRight)\n                }\n                // Validate only word arrays with at least two characters, as\n                // one-word words are invalid in scrabble\n                if (wrdH.length > 1) {\n                    allwords.push(wrdH);\n                }\n                // If there's a piece/are pieces at above it, add it/them to the beginning\n                // of the word array\n                if (piecesAbove.length !== 0) {\n                    wrdV.unshift(...piecesAbove)\n                }\n                // If there's a piece/are pieces below it, add it/them to the end\n                // of the word array\n                if (piecesBelow.length !== 0) {\n                    wrdV.push(...piecesBelow)\n                }\n                // Validate only word arrays with at least two characters, as\n                // one-word words are invalid in scrabble\n                if (wrdV.length > 1) {\n                    allwords.push(wrdV);\n                }\n            }\n            // While for the others, get only those opposite the playing direction\n            else {\n                if (playDirection === 'right') {\n                    // If there's a piece/are pieces at above it, add it/them to the beginning\n                    // of the word array\n                    if (piecesAbove.length !== 0) {\n                        wrdV.unshift(...piecesAbove)\n                    }\n                    // If there's a piece/are pieces below it, add it/them to the end\n                    // of the word array\n                    if (piecesBelow.length !== 0) {\n                        wrdV.push(...piecesBelow)\n                    }\n                    // Validate only word arrays with at least two characters, as\n                    // one-word words are invalid in scrabble\n                    if (wrdV.length > 1) {\n                        allwords.push(wrdV);\n                    }\n                }\n                else {\n                    // If there's a piece/are pieces on its left, add it/them to the beginning\n                    // of the word array\n                    if (piecesLeft.length !== 0) {\n                        wrdH.unshift(...piecesLeft)\n                    }\n                    // If there's a piece/are pieces on its right, add it/them to the end\n                    // of the word array\n                    if (piecesRight.length !== 0) {\n                        wrdH.push(...piecesRight)\n                    }\n                    // Validate only word arrays with at least two characters, as\n                    // one-word words are invalid in scrabble\n                    if (wrdH.length > 1) {\n                        allwords.push(wrdH);\n                    }\n                }\n            }\n        });\n        return allwords;\n    }\n\n    computeScore = (args) => { // Can do better than O(n)3\n        let finalScore = 0;\n\n        // For each word\n        args.words.forEach(word => {\n            // Assign initial values\n            let wordScore = 0, mul = 1;\n            // For each string array in each word\n            word.forEach(s => {\n                // Get the associated weight with the string\n                let weight = s[1];\n                // For each weighted play, previously identified\n                this.playWeights.forEach(a => {\n                    if (s[2] !== undefined) {\n                        // If the strings are equal\n                        if (s[0] === a[0] && s[1] === a[1] && s[2] === a[2]) {\n                            // Confirm the type of weighted play and \n                            // update accordingly\n                            if (['dL', 'tL'].includes(a[3])) {\n                                weight = weight * letterMapping[a[3]];\n                            }\n                            else if (['tW', 'dW'].includes(a[3])) {\n                                mul = letterMapping[a[3]];\n                            }\n                        }\n                    }\n                });\n                wordScore = wordScore + weight;\n            });\n            wordScore = wordScore * mul;\n            finalScore = finalScore + wordScore;\n        });\n\n        // If bingo, add 50 points\n        if (args.isBingo) {\n            finalScore += 50;\n        }\n        return finalScore;\n    }\n\n    playTurn = () => {\n        // You can, of course, only play when it's your turn\n        if (this.props.isTurn && !this.props.gameEnded) {\n            // Reset the weights per turn\n            this.playWeights = [];\n\n            // Get pieces that were played\n            let playedPieces = this.props.getPlayedPieces();\n\n            // Check if the player has played anything\n            if ((playedPieces.length) > 0) {\n                // Validate board play based on Scrabble's rules\n                if (!this.validateBoardPlay(playedPieces)) {\n                    toast.error(\"Sorry, that's an invalid move.\");\n                    return;\n                }\n\n                // Validate words, compute score, and announce to everybody\n                let validWords = [];\n                let playedWords = this.getPlayedWords(playedPieces);\n\n                // Extract the words from the playedWords array\n                playedWords.forEach(wordArray => {\n                    let word = \"\";\n                    wordArray.forEach(attr => {\n                        word += attr[0];\n                    });\n                    validWords.push(word);\n                });\n\n                let wordValidation = makeServerRequest({\n                    requestType: 'post',\n                    url: '/words-check',\n                    payload: { words: validWords }\n                });\n\n                wordValidation.then(resp => {\n                    // Invalid word is contained in the response payload\n                    // Announce invalid word and exit\n                    if (resp.error) {\n                        toast.error(resp.error);\n                        return;\n                    }\n\n                    // Implicit that all words are valid\n\n                    // If validated, then get what's on the rack. This\n                    // will need to be refilled\n                    let remainingPieces = this.getPiecesOnRack();\n\n                    // Compute score\n                    let score = this.computeScore({\n                        words: playedWords,\n                        isBingo: playedPieces.length === 7\n                    });\n\n                    // Get new pieces the exact amount that was played\n                    let newPieces = this.getFromBag(playedPieces.length);\n\n                    // Refill rack\n                    newPieces\n                        .then((data) => {\n                            data.pieces.forEach(piece => remainingPieces.push(piece));\n                        })\n                        .then(() => {\n                            this.setState({ currentPieces: remainingPieces });\n                            this.populateRack(remainingPieces);\n                            // Publish score [among other things] to everyone\n                            this.props.socket.emit('playEvent', {\n                                numOfRem: remainingPieces.length,\n                                roomID: this.props.roomID,\n                                name: this.props.name,\n                                word: validWords[0],\n                                score: score,\n                            });\n                        });\n                });\n            }\n            else {\n                toast.error(\"Err...You haven't played anything. You can alternatively skip your turn.\");\n                return;\n            }\n        }\n    }\n\n    skipTurn = () => {\n        if (this.props.isTurn && !this.props.gameEnded) {\n            let confirmed = window.confirm(\"Are you sure you want to skip your turn?\");\n            if (confirmed) {\n                this.recallPieces();\n                this.props.socket.emit('playEvent', {\n                    isTurnSkipped: true,\n                    name: this.props.name,\n                    roomID: this.props.roomID,\n                });\n            }\n        }\n    }\n\n    swapPieces = () => {\n        // tbd\n    }\n\n    getPlayDirection = (playedPieces) => {\n        let dirCount = 0;\n        let playDirection = 'down'; // Default; assumed\n        let topmost = this.getTilePositionOnBoard(playedPieces[0].parentNode);\n\n        // Essentially, since each row on the board has a length of 15,\n        // go round the board 15 times, effectively making your destination\n        // just one tile away from the bottom of the current tile. If during \n        // that journey, a tile is found with a child having the identifiable \n        // class of a just-played piece ('bp'), the surely, the play direction was right\n        for (let i = 1; i < 16; i++) {\n            let index = topmost + i;\n            // End of the board. If play direction hasn't been detected as right,\n            // then it's implicitly down\n            if (index > 224) {\n                break;\n            }\n            let piece = this.boardTiles[index].firstChild;\n\n            // Here, the play direction is gotten, and if, at the last\n            // index (at the tile directly below the main tile), a piece\n            // with a currently-playing class is found, then add 15 (just\n            // an identifier for the eventual check to come). This confirms \n            // that the user played in two directions, which is not allowed\n            // in Scrabble\n            if (piece !== null) {\n                if ([...piece.classList].includes('bp')) {\n                    if (i === 15) {\n                        dirCount += 15;\n                        playDirection = 'down';\n                    }\n                    else {\n                        dirCount += 1;\n                        playDirection = 'right';\n                    }\n                }\n            }\n        }\n\n        // If two directions were detected, invaidate the entire\n        // thing\n        if (dirCount > 15) {\n            return false;\n        }\n        return playDirection;\n    }\n\n    validateBoardPlay = (playedPieces) => {\n        let isValidPlay = false;\n        let boardIsEmpty = document.querySelectorAll('.vP').length === 0;\n\n        // Implicit down playDirection. \n        // Looping 15 times takes you to the tile directly below\n        let loopLength = 15;\n\n        // If only one piece was played\n        if (playedPieces.length === 1) {\n            // If the player was first to play (and played just one)\n            // Invalidate it. [S]he has to play at least two letters,\n            // according to the official Scrabble rules\n            if (boardIsEmpty) {\n                return false;\n            }\n            // If the game had been ongoing, ensure there's a neighbour\n            else {\n                isValidPlay = this.validateNearestNeighbours(playedPieces) >= 1;\n            }\n        }\n        else { // 2 or more pieces were played\n            let playDirection = this.getPlayDirection(playedPieces);\n\n            // Validate that the play direction didn't oscillate between the two\n            // options\n            if (playDirection === false) {\n                return false;\n            }\n            // Simple cache for reuse. This is always called before the \n            // reuser\n            this.getPlayDirection.cachedDirection = playDirection;\n\n            if (playDirection === 'right') {\n                loopLength = 1;\n            }\n\n            // The first to play doesn't meet any valid plays\n            // when [s]he plays.  The consequent players do\n            if (!boardIsEmpty) {\n\n                if (this.validateNearestNeighbours(playedPieces) < 1) {\n                    return false;\n                }\n\n                let validCount = this.getValidPlayCount(playedPieces, loopLength, boardIsEmpty);\n                if (validCount < (playedPieces.length - 1)) {\n                    return false;\n                }\n\n                isValidPlay = true;\n            }\n            else {\n                // All of them should be valid\n                let validCount = this.getValidPlayCount(playedPieces, loopLength, boardIsEmpty);\n                if (validCount < (playedPieces.length - 1)) {\n                    return false;\n                }\n\n                // Check all the played pieces' positions. At least one \n                // must be on the center tile\n                isValidPlay = this.checkIfPlayWasCentered(playedPieces);\n            }\n        }\n        // Return validation result\n        return isValidPlay;\n    }\n\n    validateNearestNeighbours = (playedPieces) => {\n        let validCount = 0;\n\n        playedPieces.forEach(piece => {\n            let tilesToCheck = [];\n            let indexLeft, indexUp, indexDown, indexRight;\n            let pieceTilePosition = this.getTilePositionOnBoard(piece.parentNode);\n\n            // Get the indices of the tiles at the top, left, right,\n            // and bottom of the played piece. Eventually, at least\n            // one of them must point to a validated play piece\n            indexUp = pieceTilePosition - 15;\n            indexLeft = pieceTilePosition - 1;\n            indexDown = pieceTilePosition + 15;\n            indexRight = pieceTilePosition + 1;\n\n            // The rules of Scrabble are such that after the very first play, every subsequent\n            // play must be linked either through the top, left, bottom or right, with a previously \n            // played tile. \n            // At the top of the board (top left), the pieces play on the very first row do not have any \n            // indexes up (they themselves are the very least indices). Conversely, at the bottom of the \n            // board, (bottom right), the pieces played on the very bottom row do not have any indexes at\n            // the bottom because they themselves are the most indices. The below blocks checks these and\n            // ensures only the right tiles are eventually checked\n            if (indexUp >= 0) {\n                tilesToCheck.push(this.boardTiles[indexUp]);\n            }\n            if (indexLeft >= 0) {\n                tilesToCheck.push(this.boardTiles[indexLeft]);\n            }\n            if (indexDown <= 224) {\n                tilesToCheck.push(this.boardTiles[indexDown]);\n            }\n            if (indexRight <= 224) {\n                tilesToCheck.push(this.boardTiles[indexRight]);\n            }\n\n            // Check all the played pieces' positions. At least one must be \n            // linked (top, left, bottom, right) to a previously-played \n            // piece. That's how Scrabble works\n            tilesToCheck.forEach((tile) => {\n                if (tile.firstChild !== null) {\n                    if ([...tile.firstChild.classList].includes('vP')) {\n                        validCount += 1;\n                    }\n                }\n            });\n        });\n\n        return validCount;\n    }\n\n    getValidPlayCount = (playedPieces, loopLength, boardIsEmpty) => {\n        let condition;\n        let validCount = 0;\n\n        playedPieces.forEach((piece, index) => {\n            if ((index + 1) !== playedPieces.length) {\n                // Get the tile for the piece by the playDirection\n                let tileIndex = this.getTilePositionOnBoard(piece.parentNode);\n                let tile = this.boardTiles[tileIndex + loopLength];\n\n                // If it doesn't have a first child, then no new piece was appended to it\n                // Invalidate the play\n                if (tile.firstChild === null) {\n                    return false;\n                }\n                // Get the classlist of the piece by the playDirection\n                let pieceClasses = [...tile.firstChild.classList];\n\n                condition = boardIsEmpty ?\n                    pieceClasses.includes('bp') :\n                    condition = pieceClasses.includes('bp') || pieceClasses.includes('vP');\n\n                // Includes either\n                if (condition) {\n                    validCount += 1;\n                }\n            }\n        });\n\n        return validCount;\n    }\n\n    checkIfPlayWasCentered = (playedPieces) => {\n        let confirmed = false;\n\n        playedPieces.forEach(piece => {\n            // Get the tile for the piece\n            let tile = this.boardTiles[this.getTilePositionOnBoard(piece.parentNode)];\n            // Center tile has a class of 'cT'. Check against this\n            if ([...tile.classList].includes('cT')) {\n                confirmed = true;\n            }\n        });\n\n        return confirmed;\n    }\n\n    getTilePositionOnBoard = (tile) => {\n        // For each tile on the board, get the one that matches\n        // the passed tile\n        return [].indexOf.call(this.boardTiles, tile);\n    }\n\n    makeDraw = (e) => {\n        // Select a random player to start from all the players\n        e.preventDefault();\n\n        // Shuffle all the players. The resulting order is the order\n        // with which the players will take turns\n        let playOrder = this.inPlaceShuffle(this.props.players);\n\n        // Tell the others who gets to play first\n        this.props.socket.emit('drawEvent', {\n            playOrder: playOrder,\n            roomID: this.props.roomID\n        });\n\n        // Remove the draw button, as the draw has been done\n        let drawButton = document.getElementById('drawButton');\n        if (drawButton !== null) {\n            drawButton.remove();\n        }\n    }\n\n    getFromBag = (amount) => {\n        // Get passed amount from bag\n        let pieces = makeServerRequest({\n            payload: {},\n            requestType: 'get',\n            url: `/bag/${amount}?roomID=${this.props.roomID}`,\n        });\n        return pieces;\n    }\n\n    clearPlayedPieces = () => {\n        // Clear the board of all played pieces.\n        // Defined separately to allow for `recallPieces()` reuse\n        let playedPieces = this.props.getPlayedPieces();\n        if (playedPieces.length > 0) {\n            playedPieces.forEach((piece) => piece.remove())\n        }\n    }\n\n    shufflePieces = () => {\n        // Get the pieces on the rack\n        let pieces = this.getPiecesOnRack();\n\n        // Shuffle and update rack\n        this.populateRack(this.inPlaceShuffle(pieces));\n    }\n\n    recallPieces = () => {\n        // Current implementation is to remove all pieces played on the board\n        // and then re-create the initial rack pieces.\n\n        // It has to be your turn for this function to work\n        if (this.props.isTurn && !this.props.gameEnded) {\n            this.props.socket.emit('recallEvent', {\n                name: this.props.name,\n                roomID: this.props.roomID\n            })\n            this.clearPlayedPieces();\n            this.populateRack(this.state.currentPieces);\n        }\n    }\n\n    inPlaceShuffle = (arr) => {\n        // https://stackoverflow.com/cant-remember\n\n        for (let i = arr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;\n    }\n\n    getPiecesOnRack = () => {\n        // Storage for the pieces on the rack\n        let pieces = [];\n\n        // For each piece in the rack, get the letter and value and then\n        // store each one in the above array.\n        document.querySelectorAll('.pieceContainer').forEach((piece) => {\n            pieces.push({\n                letter: piece.textContent.slice(0, 1),\n                value: parseInt(piece.textContent.slice(1))\n            });\n        });\n\n        return pieces;\n    }\n\n    populateRack = (pieces) => {\n        let rack = document.querySelector('.rackPieces');\n        while (rack.firstChild) {\n            rack.firstChild.remove();\n        }\n        for (const [index, alphabet] of Object.entries(pieces)) {\n            let piece;\n            let pieceContainer = document.createElement('div');\n            pieceContainer.setAttribute('id', `userPiece${index}`);\n            pieceContainer.setAttribute('class', 'pieceContainer');\n            pieceContainer.setAttribute('draggable', 'true');\n            piece = `<div draggable=\"false\" class='piece'><span draggable=\"false\" class=\"letter\">${alphabet.letter}</span><span draggable=\"false\" class=\"value\">${alphabet.value}</span></div>`;\n            pieceContainer.innerHTML = piece;\n            rack.appendChild(pieceContainer);\n        }\n    }\n\n    toggleBag = () => {\n        // Validate that the bag has been updated (happens once the draw is done)\n        if (Object.keys(this.props.bagItems).length === 0) {\n            toast.info(\"Kindly wait until the draw has been made.\");\n            return;\n        }\n\n        // Get the modal section and populate it with the bag items \n        // from the props\n        let bagHome = document.getElementById('bagHome');\n        // Reset the bag\n        bagHome.innerHTML = \"\"\n        bagHome.appendChild(this.updateBag(this.props.bagItems));\n\n        // Actually show (toggle) modal\n        document.getElementById('bagModal').classList.toggle('is-active');\n    }\n\n    updateBag = (pieces) => {\n        // Create container element\n        let piecesContainer = document.createElement('div');\n        piecesContainer.setAttribute('class', 'bagPieceContainer');\n\n        // Create the pieces and eventually append to the parent\n        // container. State/props has them as an array\n        for (const letter of pieces) {\n            let piece;\n\n            let pieceCont = document.createElement('div');\n            pieceCont.setAttribute('class', 'bagPieceItem');\n\n            piece = `<div><div class='piece'><span class=\"letter\">${letter[0]}</span></div></div>\n            <div class=\"numberLeft\"><span>${letter[1]} left</span></div>`;\n\n            pieceCont.innerHTML = piece;\n            piecesContainer.appendChild(pieceCont);\n        }\n        return piecesContainer;\n    }\n\n    // Features for Game save. Tbd\n    // beforeUnload = () => {\n    //     let rack = this.getPiecesOnRack();\n    //     let boardshot = this.takeBoardSnapshot();\n    //     makeServerRequest({\n    //         requestType: 'post',\n    //         url: `/snapshot/${this.props.roomID}`,\n    //         payload = {\n    //             rack: rack,\n    //             boardshot: boardshot,\n    //             name: this.props.name\n    //         },\n    //     });\n    // }  \n    // takeBoardSnapshot = () => { // to be tested\n    //     let boardState = [];\n    //     this.boardTiles.forEach((piece, index) => {\n    //         if (piece.firstChild !== null) {\n    //             if ([...piece.firstChild.classList].includes('vP')) {\n    //                 boardState.push({\n    //                     letter: piece.firstchild.textContent.slice(0, 1),\n    //                     value: parseInt(piece.firstchild.textContent.slice(1)),\n    //                     index: index\n    //                 });\n    //             }\n    //         }\n    //     });\n\n    //     return boardState;\n    // }\n\n\n    componentDidMount = () => {\n        // Assign global variable\n        this.boardTiles = document.querySelectorAll('.tile');\n\n        // Register for event to effect a recall when a player does \n        // that. Effects reflection among all players\n        this.props.socket.on('recallPieces', (data) => {\n            if (data.name !== this.props.name) {\n                this.clearPlayedPieces();\n            }\n        });\n\n        // Get new pieces, update the state and populate the rack\n        let newPieces = this.getFromBag(7 - this.state.currentPieces.length);\n        newPieces.then((data) => {\n            this.setState({ currentPieces: data.pieces },\n                () => { this.populateRack(this.state.currentPieces) });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"rack\">\n                <div id=\"bagModal\" className=\"modal\">\n                    <div onClick={this.toggleBag} className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section id=\"bagHome\" className=\"modal-card-body\">\n                        </section>\n                    </div>\n                </div>\n                <div className=\"rackPieces\">\n                </div>\n                <div className='rackButtons'>\n                    <div title={`Bag with ${this.props.bagLength} remaining pieces`} onClick={this.toggleBag} className='bag'>\n                        <span><i className=\"fa fa-shopping-bag fa-2x\"></i></span>\n                        <span className=\"bagLength\">{this.props.bagLength}</span>\n                    </div>\n                    <div className=\"buttons is-fullwidth has-addons\">\n                        <button title=\"Recall Pieces\" onClick={this.recallPieces} className=\"button rackButton is-link\"><i className=\"fas fa-undo\"></i></button>\n                        <button title=\"Shuffle Pieces\" onClick={this.shufflePieces} className=\"button rackButton is-link\"><i className=\"fas fa-random\"></i></button>\n                        <button title=\"Swap Pieces\" onClick={this.swapPieces} className=\"button rackButton is-link\"><i className=\"fas fa-exchange-alt\"></i></button>\n                        <button title=\"Skip Turn\" onClick={this.skipTurn} className=\"button rackButton is-link\"><i className=\"fas fa-forward\"></i></button>\n                        <button title=\"Play\" className=\"button rackButton is-success\" onClick={this.playTurn}><i className=\"fas fa-play\"></i></button>\n                        {this.props.isHost ?\n                            <button id=\"drawButton\" title=\"Draw\" className=\"button rackButton is-warning\" onClick={this.makeDraw}>Draw</button>\n                            : null}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Rack;\n","import React from 'react';\n\nconst ScoreTable = (props) => {\n    let players = props.players.map((player, index) => {\n        return <tr key={index}>\n            <td>{props.name === player ? `${player} (You)` : player}</td>\n            <td id={`score_${player}`}>0</td>\n            <td id={`turn_${player}`}>No</td>\n        </tr>;\n    });\n    return (\n        <div className=\"scoresTable\">\n            <table className=\"table is-hoverable is-stripped is-fullwidth is-bordered\">\n                <thead>\n                    <tr>\n                        <th>Player</th>\n                        <th>Score</th>\n                        <th>Turn?</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {players}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ScoreTable;\n","import React from 'react'\n\nfunction WaitingRoom(props) {\n    let hostMessage = (\n        <div>\n            <div>Connected players: <b>{props.connectedPlayers}/{props.numOfPlayers}</b></div>\n            <hr />\n            <div className=\"subtitle is-7\">\n                <span role='img' aria-label=\"info\">⚠️</span> Don't forget to share your Game ID with the other players you want to join your game session.\n            </div>\n        </div>);\n    let playerMessage = (\n        <div>\n            <div>You're in the waiting room. The game will start once all players like you have joined the host's session.</div>\n        </div>\n    )\n    let room = (\n        <div className=\"waitingMessage\">\n            <div className=\"centralize title is-5\">\n                <span>Waiting for all players to join...</span>\n            </div>\n            <hr />\n            <div>Your name: <b>{props.name}</b></div>\n            <div>Game ID: <b>{props.roomID}</b></div>\n            {props.isHost ? hostMessage : playerMessage}\n        </div>\n    );\n    return (\n        <div>\n            {room}\n        </div>\n    )\n}\n\nexport default WaitingRoom;\n","import React from 'react'\n\nfunction LandingPage(props) {\n    return (\n        <div className='landing'>\n            <div className=\"title centralize\">\n                SCRABBLE\n        </div>\n            <div className=\"field is-grouped\">\n                <div className=\"control\">\n                    <button onClick={props.registerHost} className=\"button mainButton is-success\">Host Game</button>\n                </div>\n                <div className=\"control\">\n                    <button onClick={props.showJoinForm} className=\"button mainButton is-link\">Join Game</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LandingPage;\n","import React from 'react'\n\nfunction JoinGameForm(props) {\n    return (\n        <div className='joinForm'>\n            <form>\n                <div className=\"field\">\n                    <label className=\"label\">Your Name: <span className=\"imp\">*</span></label>\n                    <div className=\"control\">\n                        <input className=\"input\" type='text' onChange={props.saveUser} name='name' placeholder='e.g. Smeagol' />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <div className=\"field is-expanded\">\n                        <label className=\"label\">Game ID: <span className=\"imp\">*</span></label>\n                        <div className=\"field has-addons\">\n                            <p className=\"control\">\n                                <span className=\"button is-static\">\n                                    SC-\n                                </span>\n                            </p>\n                            <div className=\"control\">\n                                <input className=\"input\" type='text' onChange={props.saveID} name='gameID' placeholder='e.g. 903318' />\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='centralize field is-grouped is-grouped-centered'>\n                    <button style={{ marginRight: '5px' }} className=\"button optionButton is-fullwidth is-link\" onClick={props.joinRoom}>Join</button>\n                    <button style={{ marginLeft: '5px' }} className=\"button optionButton is-fullwidth is-light\" onClick={props.showHome}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default JoinGameForm;\n","import React from 'react'\n\nfunction CreateGameForm(props) {\n    return (\n        <div className='configForm'>\n            <form>\n                <div className=\"field\">\n                    <label className=\"label\">Your Name: <span className=\"imp\">*</span> </label>\n                    <div className=\"control\">\n                        <input className=\"input\" type='text' onChange={props.saveUser} name='text' placeholder='e.g: Orihime' />\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <div className=\"select is-fullwidth\">\n                        <select onChange={props.savePlayers} >\n                            <option value='' defaultValue>Choose the number of players</option>\n                            <option value='2'>2</option>\n                            <option value='3'>3</option>\n                            <option value='4'>4</option>\n                        </select>\n                    </div>\n                </div>\n                <br />\n                <div className='centralize field is-grouped is-grouped-centered'>\n                    <button style={{ marginRight: '5px' }} className=\"button optionButton is-fullwidth is-link\" onClick={props.startGame}>Start</button>\n                    <button style={{ marginLeft: '5px' }} className=\"button optionButton is-fullwidth is-light\" onClick={props.showHome}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateGameForm;\n","import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport io from 'socket.io-client';\nimport Board from '../Board/Board';\nimport Rack from '../Rack/Rack';\nimport makeServerRequest from '../../helpers/axios';\nimport ScoreTable from '../../components/ScoreTable/ScoreTable';\nimport WaitingRoom from '../../components/WaitingRoom/WaitingRoom';\nimport LandingPage from '../../components/LandingPage/LandingPage';\nimport JoinGameForm from '../../components/JoinGameForm/JoinGameForm';\nimport CreateGameForm from '../../components/CreateGameForm/CreateGameForm';\n\n\nexport default class GameUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.numOfPlayers = 0;\n        this.socket = io(`http://${window.serverIP}:5005`, { transports: ['websocket'] });\n\n        // Randomly generated id that represents the game room, just in case the client\n        // decides to be a game session host\n        this.roomID = `SC-${window.crypto.getRandomValues(new Uint32Array(1))[0].toString().slice(0, 6)}`;\n\n        this.state = {\n            name: '',\n            roomID: '',\n            players: [],\n            bagItems: {},\n            isTurn: false,\n            isHost: false,\n            bagLength: 100,\n            gameEnded: false,\n            gameStarted: false,\n            connectedPlayers: 0,\n        }\n    }\n\n    getPlayedPieces = () => {\n        return document.querySelectorAll('.bp');\n    }\n\n    concretizePlayedPieces = () => {\n        // Make all the pieces permanent. Do this, essentially, \n        // by removing their identifiable class\n        let playedPieces = this.getPlayedPieces();\n        if (playedPieces.length > 0) {\n            playedPieces.forEach((piece) => {\n                // Remove previously identifiable attrs.\n                piece.removeAttribute('class');\n                piece.removeAttribute('id');\n                // Add class of validated play (vP)\n                piece.setAttribute('class', 'vP');\n                piece.setAttribute('draggable', false);\n                piece.parentNode.setAttribute('draggable', false);\n            });\n        }\n    }\n\n    showJoin = () => {\n        document.querySelector('.landing').style.display = 'none';\n        document.querySelector('.joinForm').style.display = 'block';\n    }\n\n    registerHost = () => {\n        if (!this.state.isHost) {\n            this.setState({ isHost: true, roomID: this.roomID });\n        }\n\n        document.querySelector('.landing').style.display = 'none';\n        document.querySelector('.configForm').style.display = 'block';\n    }\n\n    saveID = (event) => {\n        this.setState({ roomID: `SC-${event.target.value}`.toString() })\n    }\n\n    saveUser = (event) => {\n        this.setState({ name: event.target.value })\n    }\n\n    savePlayers = (event) => {\n        this.numOfPlayers = parseInt(event.target.value);\n    }\n\n    startGame = (e) => {\n        e.preventDefault();\n\n        // Name should be at least three letters\n        if (this.state.name.length < 3) {\n            toast.error(\"Kindly enter a longer name. Don't be shy.\");\n            return;\n        }\n        // Number of players must be two, three or four\n        if (![2, 3, 4].includes(this.numOfPlayers)) {\n            toast.error(\"Kindly select a valid number of players\");\n            return;\n        }\n        document.querySelector('.configForm').style.display = 'none';\n        document.querySelector('.waitingMessage').style.display = 'block';\n        this.socket.emit('join', { name: this.state.name, roomID: this.roomID });\n    }\n\n    joinRoom = (e) => {\n        e.preventDefault();\n\n        // Name should be at least three letters\n        if (this.state.name.length < 3) {\n            toast.error(\"Kindly enter a longer name. Don't be shy.\");\n            return;\n        }\n        // Game IDs must be nine characters\n        if (this.state.roomID.length !== 9) {\n            toast.error(\"Sorry, that's an invalid Game ID.\");\n            return;\n        }\n\n        // Get all the current game session IDs and validate\n        // that the inputted Game ID is valid \n        let gameIDs = makeServerRequest({ requestType: 'get', url: '/rooms', payload: {} });\n        gameIDs.then(data => {\n            // Validate\n            if (!data.rooms.includes(this.state.roomID)) {\n                toast.error(`😬 There's currently no game session with ID, ${this.state.roomID}.`);\n                return;\n            }\n\n            // Join the room\n            this.socket.emit('join', { name: this.state.name, roomID: this.state.roomID });\n            // Show waiting room\n            document.querySelector('.joinForm').style.display = 'none';\n            document.querySelector('.waitingMessage').style.display = 'block';\n        });\n    }\n\n    showHome = (e) => {\n        e.preventDefault();\n        this.setState({ isHost: false, name: '' }) // Essentially a reset\n        this.numOfPlayers = 0;\n\n        document.querySelector('.landing').style.display = 'block';\n        document.querySelector('.joinForm').style.display = 'none';\n        document.querySelector('.configForm').style.display = 'none';\n    }\n\n    componentDidMount = () => {\n        // Hide some configs initially\n        document.querySelector('.waitingMessage').style.display = 'none';\n        document.querySelector('.joinForm').style.display = 'none';\n        document.querySelector('.configForm').style.display = 'none';\n        document.querySelector('.entry').style.display = 'none';\n\n        /* Register event listeners */\n\n        // window.addEventListener('beforeunload', this.beforeUnload);\n\n        // Incase socket.io loses connection to the server\n        this.socket.on('reconnect_attempt', () => {\n            this.socket.io.opts.transports = ['polling', 'websocket'];\n            document.getElementById('connstatus').setAttribute('title', \"Reconnecting...\");\n            document.getElementById('connstatus').setAttribute('class', 'has-text-warning');\n        });\n\n        // On connect\n        this.socket.on('connect', () => {\n            document.getElementById('connstatus').setAttribute('title', \"Server Connection: Good\");\n            document.getElementById('connstatus').setAttribute('class', 'has-text-success');\n            if (this.state.gameStarted) {\n                this.socket.emit('join', { roomID: this.roomID, isReconnection: true });\n            }\n        });\n\n        // On disconnect\n        this.socket.on('disconnect', () => {\n            if (this.state.gameStarted) {\n                toast.error(\"Lost connection to the game server. Trying to reconnect...\");\n            }\n            document.getElementById('connstatus').setAttribute('title', \"Connection Lost\");\n            document.getElementById('connstatus').setAttribute('class', 'has-text-danger');\n        });\n\n        // When a new player joins (host or not)\n        this.socket.on('joinedRoom', (data) => {\n            // The room is closed once the game has started\n            if (!this.state.gameStarted) {\n                // Save the player's name and update the number of\n                // connected players. For the host, this happens \n                // immediately the game starts\n                this.setState({\n                    players: [...this.state.players, data.name],\n                    connectedPlayers: this.state.connectedPlayers + 1,\n                }, () => {\n                    // If the client is the host and the number of connected players\n                    // is the same as the number of required players, then announce\n                    // that the game has started. Also send all the registered players\n                    // to everybody so they can update their state\n                    if (this.state.isHost && (this.state.connectedPlayers === this.numOfPlayers)) {\n                        this.socket.emit('gameStartEvent', {\n                            allPlayers: this.state.players,\n                            roomID: this.state.roomID,\n                            gameStarted: true\n                        });\n                    }\n                });\n            }\n        });\n\n        // When a draw has been made. Announce who goes first.\n        this.socket.on('drawDone', (data) => {\n            let firstToPlay = data.playOrder[0];\n            let firsToPlayMessage, playOrderMessage = '';\n\n            // Reorder the state's players to match the turn order.\n            // Also note the length of pieces in the bag\n            this.setState({\n                players: data.playOrder,\n                bagLength: data.bagLength,\n                bagItems: data.bagItems\n            });\n\n            if (firstToPlay === this.state.name) {\n                this.setState({ isTurn: true });\n                firsToPlayMessage = `You get to play first`;\n            }\n            else {\n                firsToPlayMessage = `${firstToPlay} gets to play first`;\n            }\n\n            // Show on the score table whose turn it is\n            document.getElementById(`turn_${firstToPlay}`).innerText = 'Yes';\n\n            // Also announce the turn order\n            data.playOrder.forEach((player, index) => {\n                if (player === this.state.name) {\n                    player = `${player} (You)`;\n                }\n                if ((index + 1) === data.playOrder.length) {\n                    playOrderMessage += player;\n                }\n                else {\n                    playOrderMessage += `${player}, then `\n                }\n            });\n\n            toast.warn(`${firsToPlayMessage}. Also note that the turn order is, ${playOrderMessage}.`)\n        });\n\n        // If the game has started, remove the configuration\n        // elements. Then update the state of the connected clients.\n        this.socket.on('gameStart', (data) => {\n            // The host already has its name and connected players state up to date\n            // The remainder of the clients don't however. This does the actual update\n            this.setState({\n                gameStarted: true,\n                players: !this.state.isHost ? [...data.allPlayers] : [...this.state.players],\n                connectedPlayers: !this.state.isHost ? data.allPlayers.length : this.state.connectedPlayers,\n            });\n\n            // Unhide main game space and remove the config divs\n            document.querySelector('.entry').removeAttribute('style');\n            document.querySelectorAll('.configElements').forEach((node) => {\n                node.remove();\n            });\n\n            let welcomeMessage = this.state.isHost ?\n                \"All players have joined. Make a draw using the yellow button on your button rack. You'll\"\n                :\n                \"The host will make a draw, and you'll\"\n            toast.success(`✨ Welcome, ${this.state.name}! ${welcomeMessage} be notified (just like this) of who gets to play first. Good luck!`)\n        });\n\n        // Register for event to effect an actual valid play\n        this.socket.on('validPlay', (data) => {\n            let turnMessage, message;\n\n            // Make played pieces permanent for everybody\n            this.concretizePlayedPieces();\n\n            // Update local state upon each play\n            if (data.playerToPlay === this.state.name) {\n                this.setState({\n                    isTurn: true,\n                    bagItems: data.bagItems,\n                    bagLength: data.bagLength,\n                }, () => turnMessage = `your turn to play`);\n            }\n            else {\n                this.setState({\n                    isTurn: false,\n                    bagItems: data.bagItems,\n                    bagLength: data.bagLength,\n                }, () => turnMessage = `${data.playerToPlay}'s turn to play`);\n            }\n\n            // Update turn column on board\n            this.state.players.forEach(player => {\n                if (player === data.playerToPlay) {\n                    document.getElementById(`turn_${player}`).innerText = 'Yes';\n                }\n                else {\n                    document.getElementById(`turn_${player}`).innerText = 'No';\n                }\n            });\n\n            // If a turn is skipped, then there's no score associated with that \n            // turn. Use this as a conditional to render score or turn skipped\n            // message\n            if (data.isTurnSkipped) {\n                message = data.name === this.state.name ?\n                    \"You skipped your turn\" :\n                    message = `Turn skipped by ${data.name}`;\n            }\n            else {\n                // Construct score message\n                message = data.name === this.state.name ?\n                    `You played \"${data.word}\" worth ${data.score} points` :\n                    `${data.name} played \"${data.word}\" worth ${data.score} points`;\n\n                // Update the score board with the score\n                let scoreDiv = document.getElementById(`score_${data.name}`);\n                scoreDiv.innerText = parseInt(scoreDiv.innerText) + data.score\n            }\n\n\n            // If the player's rack is empty and the bag is also \n            // empty, the game has ended\n            if (data.numOfRem === 0 && data.bagLength === 0) {\n                let finalMessage = '';\n                let winner = { name: '', score: 0 };\n\n                // Announce to everybody\n                toast.info(`${message}.`);\n                this.setState({ gameEnded: true })\n\n                // Get winner\n                this.state.players.forEach(player => {\n                    let score = parseInt(document.getElementById(`score_${player}`).innerText);\n                    if (score > winner.score) {\n                        winner.name = player;\n                        winner.score = score;\n                    }\n                });\n\n                if (this.state.name === winner.name) {\n                    finalMessage = `Congratulations, ${winner.name}! You are the winner with ${winner.score} points.`;\n                }\n                else {\n                    finalMessage = `${winner.name} is the winner with ${winner.score} points. Good game, ${this.state.name}.`;\n                }\n                // Show modal with final message\n                this.toggleModal();\n                document.getElementById('winner').innerText = finalMessage;\n            }\n            else {\n                let emptyMessage = '';\n                // Announce to everybody\n                toast.info(`${message}. It's ${turnMessage}.`);\n\n                if (data.bagLength === 0) {\n                    emptyMessage = \"No pieces are left in the bag\";\n                }\n                else if (data.bagLength === 1) {\n                    emptyMessage = \"Only one piece is left in the bag\";\n                }\n                else {\n                    emptyMessage = `Only ${data.bagLength} pieces are left in the bag.`;\n                }\n\n                if (data.bagLength <= 7) {\n                    this.socket.emit('inPlayEvent',\n                        {\n                            roomID: this.state.roomID,\n                            eventType: 'bagNearEmpty',\n                            message: `Heads up: ${emptyMessage}`\n                        });\n                }\n            }\n        });\n    }\n\n    toggleModal = () => {\n        document.getElementById('endModal').classList.toggle('is-active');\n    }\n\n    // beforeUnload = () => {\n    //     this.socket.emit('leave', { roomID: this.state.roomID })\n    // }\n\n    // componentWillUnmount = () => {\n    //     window.removeEventListener('beforeunload', this.beforeUnload);\n    // }\n\n    render() {\n        let gameConfig =\n            <div className=\"configElements\">\n                <LandingPage registerHost={this.registerHost} showJoinForm={this.showJoin} />\n                <CreateGameForm savePlayers={this.savePlayers}\n                    saveUser={this.saveUser}\n                    showHome={this.showHome}\n                    startGame={this.startGame} />\n                <JoinGameForm saveID={this.saveID}\n                    saveUser={this.saveUser}\n                    joinRoom={this.joinRoom}\n                    showHome={this.showHome} />\n                <WaitingRoom name={this.state.name}\n                    roomID={this.state.roomID}\n                    isHost={this.state.isHost}\n                    numOfPlayers={this.numOfPlayers}\n                    connectedPlayers={this.state.connectedPlayers} />\n            </div>\n        let gameComponents =\n            <div className=\"entry columns is-vcentered\">\n                <div className=\"column is-two-thirds\">\n                    <Board\n                        roomID={this.state.roomID}\n                        socket={this.socket}\n                        name={this.state.name}\n                        isTurn={this.state.isTurn}\n                        gameEnded={this.state.gameEnded} />\n                </div>\n                <div className=\"column\">\n                </div>\n                <div className=\"column\">\n                </div>\n                <div className=\"column is-one-third\">\n                    <div className=\"extras\">\n                        <div className='connection'>\n                            <span id=\"connstatus\" ><i className=\"fas fa-wifi\"></i></span>&nbsp;\n                        </div>\n                        <ScoreTable\n                            socket={this.socket}\n                            name={this.state.name}\n                            players={this.state.players} />\n\n                        {this.state.gameStarted ?\n                            <Rack socket={this.socket}\n                                name={this.state.name}\n                                roomID={this.state.roomID}\n                                isHost={this.state.isHost}\n                                isTurn={this.state.isTurn}\n                                players={this.state.players}\n                                gameEnded={this.state.gameEnded}\n                                bagItems={this.state.bagItems}\n                                bagLength={this.state.bagLength}\n                                gameStarted={this.state.gameStarted}\n                                getPlayedPieces={this.getPlayedPieces} /> :\n                            null}\n                    </div>\n                </div>\n            </div>\n        return (\n            <div className='gameSpace'>\n                <div id=\"endModal\" className=\"modal\">\n                    <div onClick={this.toggleModal} className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section className=\"modal-card-body\">\n                            <div className='endMessage'>\n                                <div className=\"centralize trophy\"><span role=\"img\" aria-label=\"trophy\">🏆</span></div>\n                                <div id=\"winner\" className=\"subtitle is-5\"></div>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n                {gameComponents}\n                {gameConfig}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ToastContainer from '../helpers/toastify';\nimport GameUser from './User/User';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <GameUser />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/roboto.css';\nimport './assets/styles/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}